{
  "hash": "d55a85296dc5aa0ce5249a7564a6ab34",
  "result": {
    "markdown": "---\ntitle: \"Importing data\"\nsubtitle: \"<br><br> Data Science in a Box\"\nauthor: \"[datasciencebox.org](https://datasciencebox.org/)\"\noutput:\n  xaringan::moon_reader:\n    css: [\"../xaringan-themer.css\", \"../slides.css\"]\n    lib_dir: libs\n    nature:\n      ratio: \"16:9\"\n      highlightLines: true\n      highlightStyle: solarized-light\n      countIncrementalSlides: false\n---\n\n\n\n\nlayout: true\n  \n<div class=\"my-footer\">\n<span>\n<a href=\"https://datasciencebox.org\" target=\"_blank\">datasciencebox.org</a>\n</span>\n</div> \n\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nclass: middle\n\n# Reading rectangular data into R\n\n\n---\n\nclass: middle\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/readr.png){fig-align='center' width=80%}\n:::\n:::\n]\n.pull-right[\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/readxl.png){fig-align='center' width=80%}\n:::\n:::\n]\n\n---\n\n\n.pull-left[\n## readr\n\n- `read_csv()` - comma delimited files\n- `read_csv2()` - semicolon separated files (common in countries where , is used as the decimal place)\n- `read_tsv()` - tab delimited files\n- `read_delim()` - reads in files with any delimiter\n- `read_fwf()` - fixed width files\n- ...\n]\n\n--\n.pull-right[\n## readxl\n\n- `read_excel()` - read xls or xlsx files\n- ...\n]\n\n\n---\n\n## Reading data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnobel <- read_csv(file = \"data/nobel.csv\")\nnobel\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 935 × 26\n     id firstname      surname    year category affiliation city \n  <dbl> <chr>          <chr>     <dbl> <chr>    <chr>       <chr>\n1     1 Wilhelm Conrad Röntgen    1901 Physics  Munich Uni… Muni…\n2     2 Hendrik A.     Lorentz    1902 Physics  Leiden Uni… Leid…\n3     3 Pieter         Zeeman     1902 Physics  Amsterdam … Amst…\n4     4 Henri          Becquerel  1903 Physics  École Poly… Paris\n5     5 Pierre         Curie      1903 Physics  École muni… Paris\n6     6 Marie          Curie      1903 Physics  <NA>        <NA> \n# … with 929 more rows, and 19 more variables: country <chr>,\n#   born_date <date>, died_date <date>, gender <chr>,\n#   born_city <chr>, born_country <chr>,\n#   born_country_code <chr>, died_city <chr>,\n#   died_country <chr>, died_country_code <chr>,\n#   overall_motivation <chr>, share <dbl>, motivation <chr>,\n#   born_country_original <chr>, born_city_original <chr>, …\n```\n:::\n:::\n\n---\n\n\n## Writing data\n\n.pull-left[\n- Write a file\n\n\n::: {.cell layout-align=\"center\" hash='u2-d12-data-import_cache/html/unnamed-chunk-5_0aa44663f64189c2dfc9e34737c4bf01'}\n\n```{.r .cell-code}\ndf <- tribble(\n  ~x, ~y,\n  1,  \"a\",\n  2,  \"b\",\n  3,  \"c\"\n)\n\nwrite_csv(df, file = \"data/df.csv\")\n```\n:::\n\n]\n\n--\n.pull-right[\n- Read it back in to inspect\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nread_csv(\"data/df.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 b    \n3     3 c    \n```\n:::\n:::\n\n]\n\n\n---\n\n.your-turn[\n### .hand[Your turn!]\n\n- RStudio Cloud > `AE 06 - Nobels and sales + Data import` > open `nobels-csv.Rmd` and knit.\n- Read in the `nobels.csv` file from the `data-raw/` folder.\n- Split into two (STEM and non-STEM): \n  - Create a new data frame, `nobel_stem`, that filters for the STEM fields \n(Physics, Medicine, Chemistry, and Economics).\n  - Create another data frame, `nobel_nonstem`, that filters for the remaining \nfields.  \n- Write out the two data frames to `nobel-stem.csv` and `nobel-nonstem.csv`, \nrespectively, to `data/`.\n\n**Hint:** Use the `%in%` operator when `filter()`ing.\n]\n\n---\n\n\nclass: middle\n\n# Variable names\n\n\n---\n\n## Data with bad names\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nedibnb_badnames <- read_csv(\"data/edibnb-badnames.csv\")\nnames(edibnb_badnames)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"ID\"                   \"Price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"Number of bathrooms\"  \"Number of Bedrooms\"  \n [7] \"n beds\"               \"Review Scores Rating\"\n [9] \"Number of reviews\"    \"listing_url\"         \n```\n:::\n:::\n\n--\n\n... but R doesn't allow spaces in variable names\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(edibnb_badnames, aes(x = Number of bathrooms, y = Price)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:1:40: unexpected symbol\n1: ggplot(edibnb_badnames, aes(x = Number of\n                                           ^\n```\n:::\n:::\n\n---\n\n\n## Option 1 - Define column names\n\n.small[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nedibnb_col_names <- read_csv(\"data/edibnb-badnames.csv\",\n                             col_names = c(\"id\", \"price\", \n                                           \"neighbourhood\", \"accommodates\",\n                                           \"bathroom\", \"bedroom\", \n                                           \"bed\", \"review_scores_rating\", \n                                           \"n_reviews\", \"url\"))\n\nnames(edibnb_col_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"bathroom\"             \"bedroom\"             \n [7] \"bed\"                  \"review_scores_rating\"\n [9] \"n_reviews\"            \"url\"                 \n```\n:::\n:::\n\n]\n\n\n---\n\n## Option 2 - Format text to snake_case\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nedibnb_clean_names <- read_csv(\"data/edibnb-badnames.csv\") %>%\n  janitor::clean_names()\n\nnames(edibnb_clean_names)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"id\"                   \"price\"               \n [3] \"neighbourhood\"        \"accommodates\"        \n [5] \"number_of_bathrooms\"  \"number_of_bedrooms\"  \n [7] \"n_beds\"               \"review_scores_rating\"\n [9] \"number_of_reviews\"    \"listing_url\"         \n```\n:::\n:::\n\n---\n\n\nclass: middle\n\n# Variable types\n\n\n---\n\n.question[\nWhich type is `x`? Why?\n]\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/df-na.png){fig-align='center' width=100%}\n:::\n:::\n]\n.pull-right[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nread_csv(\"data/df-na.csv\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n  x     y              z     \n  <chr> <chr>          <chr> \n1 1     a              hi    \n2 <NA>  b              hello \n3 3     Not applicable 9999  \n4 4     d              ola   \n5 5     e              hola  \n6 .     f              whatup\n7 7     g              wassup\n8 8     h              sup   \n9 9     i              <NA>  \n```\n:::\n:::\n]\n\n---\n\n\n## Option 1. Explicit NAs\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nread_csv(\"data/df-na.csv\", \n         na = c(\"\", \"NA\", \".\", \"9999\", \"Not applicable\"))\n```\n:::\n\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/df-na.png){fig-align='center' width=100%}\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n      x y     z     \n  <dbl> <chr> <chr> \n1     1 a     hi    \n2    NA b     hello \n3     3 <NA>  <NA>  \n4     4 d     ola   \n5     5 e     hola  \n6    NA f     whatup\n7     7 g     wassup\n8     8 h     sup   \n9     9 i     <NA>  \n```\n:::\n:::\n\n]\n\n\n---\n\n## Option 2. Specify column types\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nread_csv(\"data/df-na.csv\", col_types = list(col_double(), \n                                            col_character(), \n                                            col_character()))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: One or more parsing issues, see `problems()` for details\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n      x y              z     \n  <dbl> <chr>          <chr> \n1     1 a              hi    \n2    NA b              hello \n3     3 Not applicable 9999  \n4     4 d              ola   \n5     5 e              hola  \n6    NA f              whatup\n7     7 g              wassup\n8     8 h              sup   \n9     9 i              <NA>  \n```\n:::\n:::\n\n---\n\n\n## Column types\n\n.small[\n**type function**  | **data type**\n------------------ | -------------\n`col_character()`  | character\n`col_date()`       | date\n`col_datetime()`   | POSIXct (date-time)\n`col_double()`     | double (numeric)\n`col_factor()`     | factor\n`col_guess()`      | let readr guess (default)\n`col_integer()`    | integer\n`col_logical()`    | logical\n`col_number()`     | numbers mixed with non-number characters\n`col_numeric()`    | double or integer\n`col_skip()`       | do not read\n`col_time()`       | time\n]\n\n\n---\n\n.question[\nWondering where you remember these from?\n]\n\n::: {.cell layout-align=\"center\" output.lines='7'}\n\n```{.r .cell-code}\nread_csv(\"data/df-na.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 9 Columns: 3\n── Column specification ─────────────────────────────────────────\nDelimiter: \",\"\nchr (3): x, y, z\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 3\n  x     y              z     \n  <chr> <chr>          <chr> \n1 1     a              hi    \n2 <NA>  b              hello \n3 3     Not applicable 9999  \n4 4     d              ola   \n...\n```\n:::\n:::\n\n---\n\n\nclass:middle\n\n# Case study: Favourite foods\n\n\n---\n\n## Favourite foods\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/fav-food/fav-food.png){fig-align='center' width=60%}\n:::\n:::\n\n--\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfav_food <- read_excel(\"data/favourite-food.xlsx\") #<<\n\nfav_food\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  `Student ID` `Full Name`    favourite.food mealPlan AGE   SES  \n         <dbl> <chr>          <chr>          <chr>    <chr> <chr>\n1            1 Sunil Huffmann Strawberry yo… Lunch o… 4     High \n2            2 Barclay Lynn   French fries   Lunch o… 5     Midd…\n3            3 Jayendra Lyne  N/A            Breakfa… 7     Low  \n4            4 Leon Rossini   Anchovies      Lunch o… 99999 Midd…\n5            5 Chidiegwu Dun… Pizza          Breakfa… five  High \n```\n:::\n:::\n\n---\n\n\n## Variable names\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/fav-food/fav-food-names.png){fig-align='center' width=60%}\n:::\n:::\n\n\n--\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfav_food <- read_excel(\"data/favourite-food.xlsx\") %>%\n  janitor::clean_names() #<<\n\nfav_food \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  student_id full_name       favourite_food meal_plan age   ses  \n       <dbl> <chr>           <chr>          <chr>     <chr> <chr>\n1          1 Sunil Huffmann  Strawberry yo… Lunch on… 4     High \n2          2 Barclay Lynn    French fries   Lunch on… 5     Midd…\n3          3 Jayendra Lyne   N/A            Breakfas… 7     Low  \n4          4 Leon Rossini    Anchovies      Lunch on… 99999 Midd…\n5          5 Chidiegwu Dunk… Pizza          Breakfas… five  High \n```\n:::\n:::\n\n---\n\n## Handling NAs\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/fav-food/fav-food-nas.png){fig-align='center' width=60%}\n:::\n:::\n\n--\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfav_food <- read_excel(\"data/favourite-food.xlsx\",\n                       na = c(\"N/A\", \"99999\")) %>% #<<\n  janitor::clean_names()\n\nfav_food \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  student_id full_name       favourite_food meal_plan age   ses  \n       <dbl> <chr>           <chr>          <chr>     <chr> <chr>\n1          1 Sunil Huffmann  Strawberry yo… Lunch on… 4     High \n2          2 Barclay Lynn    French fries   Lunch on… 5     Midd…\n3          3 Jayendra Lyne   <NA>           Breakfas… 7     Low  \n4          4 Leon Rossini    Anchovies      Lunch on… <NA>  Midd…\n5          5 Chidiegwu Dunk… Pizza          Breakfas… five  High \n```\n:::\n:::\n\n---\n\n\n## Make `age` numeric\n\n.pull-left-wide[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfav_food <- fav_food %>%\n  mutate( #<<\n    age = if_else(age == \"five\", \"5\", age), #<<\n    age = as.numeric(age) #<<\n    ) #<<\n\nglimpse(fav_food) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 5\nColumns: 6\n$ student_id     <dbl> 1, 2, 3, 4, 5\n$ full_name      <chr> \"Sunil Huffmann\", \"Barclay Lynn\", \"Jayen…\n$ favourite_food <chr> \"Strawberry yoghurt\", \"French fries\", NA…\n$ meal_plan      <chr> \"Lunch only\", \"Lunch only\", \"Breakfast a…\n$ age            <dbl> 4, 5, 7, NA, 5\n$ ses            <chr> \"High\", \"Middle\", \"Low\", \"Middle\", \"High\"\n```\n:::\n:::\n\n]\n.pull-right-narrow[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/fav-food/fav-food-age.png){fig-align='center' width=60%}\n:::\n:::\n\n]\n\n\n---\n\n## Socio-economic status\n\n.question[\nWhat order are the levels of `ses` listed in?\n]\n\n.pull-left-wide[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfav_food %>%\n  count(ses)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  ses        n\n  <chr>  <int>\n1 High       2\n2 Low        1\n3 Middle     2\n```\n:::\n:::\n]\n.pull-right-narrow[\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/fav-food/fav-food-ses.png){fig-align='center' width=60%}\n:::\n:::\n]\n\n---\n\n\n## Make `ses` factor\n\n.pull-left-wide[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfav_food <- fav_food %>%\n  mutate(ses = fct_relevel(ses, \"Low\", \"Middle\", \"High\")) #<<\n\nfav_food %>%\n  count(ses)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  ses        n\n  <fct>  <int>\n1 Low        1\n2 Middle     2\n3 High       2\n```\n:::\n:::\n\n]\n\n\n---\n\n## Putting it altogether\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfav_food <- read_excel(\"data/favourite-food.xlsx\", na = c(\"N/A\", \"99999\")) %>%\n  janitor::clean_names() %>%\n  mutate(\n    age = if_else(age == \"five\", \"5\", age), \n    age = as.numeric(age),\n    ses = fct_relevel(ses, \"Low\", \"Middle\", \"High\")\n  )\n\nfav_food\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  student_id full_name       favourite_food meal_plan   age ses  \n       <dbl> <chr>           <chr>          <chr>     <dbl> <fct>\n1          1 Sunil Huffmann  Strawberry yo… Lunch on…     4 High \n2          2 Barclay Lynn    French fries   Lunch on…     5 Midd…\n3          3 Jayendra Lyne   <NA>           Breakfas…     7 Low  \n4          4 Leon Rossini    Anchovies      Lunch on…    NA Midd…\n5          5 Chidiegwu Dunk… Pizza          Breakfas…     5 High \n```\n:::\n:::\n\n---\n\n\n## Out and back in\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwrite_csv(fav_food, file = \"data/fav-food-clean.csv\")\n\nfav_food_clean <- read_csv(\"data/fav-food-clean.csv\")\n```\n:::\n\n---\n\n.question[\nWhat happened to `ses` again?\n]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfav_food_clean %>%\n  count(ses)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  ses        n\n  <chr>  <int>\n1 High       2\n2 Low        1\n3 Middle     2\n```\n:::\n:::\n\n---\n\n\n## `read_rds()` and `write_rds()`\n\n- CSVs can be unreliable for saving interim results if there is specific variable type information you want to hold on to.\n- An alternative is RDS files, you can read and write them with `read_rds()` and `write_rds()`, respectively.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nread_rds(path)\nwrite_rds(x, path)\n```\n:::\n\n---\n\n## Out and back in, take 2\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nwrite_rds(fav_food, file = \"data/fav-food-clean.rds\")\n\nfav_food_clean <- read_rds(\"data/fav-food-clean.rds\")\n\nfav_food_clean %>%\n  count(ses)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  ses        n\n  <fct>  <int>\n1 Low        1\n2 Middle     2\n3 High       2\n```\n:::\n:::\n\n---\n\n\nclass: middle\n\n# Other types of data\n\n\n---\n\n## Other types of data\n\n- **googlesheets4:** Google Sheets\n- **haven**: SPSS, Stata, and SAS files\n- **DBI**, along with a database specific backend (e.g. RMySQL, RSQLite, RPostgreSQL etc): allows you to run SQL queries against a database and return a data frame\n- **jsonline**: JSON\n- **xml2**: xml\n- **rvest**: web scraping\n- **httr**: web APIs\n- **sparklyr**: data loaded into spark\n\n---\n\n\n.your-turn[\n### .hand[Your turn!]\n.midi[\n- RStudio Cloud > `AE 06 - Nobels and sales + Data import` > `sales-excel.Rmd`. \n- Load the `sales.xlsx` file from the `data-raw/` folder, using appropriate arguments for the `read_excel()` function such that it looks like the output on the left.\n- **Stretch goal:** Manipulate the sales data such that it looks like the output on the right.\n]\n]\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n  id      n    \n  <chr>   <chr>\n1 Brand 1 n    \n2 1234    8    \n3 8721    2    \n4 1822    3    \n5 Brand 2 n    \n6 3333    1    \n# … with 3 more rows\n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 3\n  brand      id     n\n  <chr>   <dbl> <dbl>\n1 Brand 1  1234     8\n2 Brand 1  8721     2\n3 Brand 1  1822     3\n4 Brand 2  3333     1\n5 Brand 2  2156     3\n6 Brand 2  3987     6\n# … with 1 more row\n```\n:::\n:::\n\n]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/font-awesome/css/all.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/font-awesome/css/v4-shims.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/panelset/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/panelset/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}