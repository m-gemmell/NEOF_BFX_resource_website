{
  "hash": "2bda3e39a0a6c346653506351e8f7f9d",
  "result": {
    "markdown": "---\ntitle: \"Cross validation\"\nsubtitle: \"<br><br> Data Science in a Box\"\nauthor: \"[datasciencebox.org](https://datasciencebox.org/)\"\noutput:\n  xaringan::moon_reader:\n    css: [\"../xaringan-themer.css\", \"../slides.css\"]\n    lib_dir: libs\n    anchor_sections: FALSE\n    nature:\n      ratio: \"16:9\"\n      highlightLines: true\n      highlightStyle: solarized-light\n      countIncrementalSlides: false\n---\n\n\n\n\nlayout: true\n  \n<div class=\"my-footer\">\n<span>\n<a href=\"https://datasciencebox.org\" target=\"_blank\">datasciencebox.org</a>\n</span>\n</div> \n\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nclass: middle\n\n# Data and exploration\n\n\n---\n\nbackground-image: url(\"img/the-office.jpeg\")\nclass: middle\n\n---\n\n\n## Data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_ratings <- read_csv(\"data/office_ratings.csv\")\noffice_ratings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 188 × 6\n  season episode title         imdb_rating total_votes air_date  \n   <dbl>   <dbl> <chr>               <dbl>       <dbl> <date>    \n1      1       1 Pilot                 7.6        3706 2005-03-24\n2      1       2 Diversity Day         8.3        3566 2005-03-29\n3      1       3 Health Care           7.9        2983 2005-04-05\n4      1       4 The Alliance          8.1        2886 2005-04-12\n5      1       5 Basketball            8.4        3179 2005-04-19\n6      1       6 Hot Girl              7.8        2852 2005-04-26\n# … with 182 more rows\n```\n:::\n:::\n\n\n.footnote[\n.small[\nSource: The data come from [data.world](https://data.world/anujjain7/the-office-imdb-ratings-dataset), by way of [TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-03-17/readme.md). \n]\n]\n\n\n---\n\n## IMDB ratings\n\n.panelset[\n::: {.cell layout-align=\"center\" panelset='[\"Plot\",\"Code\"]'}\n<div class=\"panel\">\n<div class=\"panel-name\">Code</div>\n\n```{.r .cell-code}\nggplot(office_ratings, aes(x = imdb_rating)) +\n  geom_histogram(binwidth = 0.25) +\n  labs(\n    title = \"The Office ratings\",\n    x = \"IMDB Rating\"\n  )\n```\n\n\n\n</div>\n\n<div class=\"panel\">\n<div class=\"panel-name\">Plot</div>\n\n::: {.cell-output-display}\n![](u4-d09-cross-validation_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=60%}\n:::\n\n\n\n</div>\n:::\n]\n\n---\n\n\n## IMDB ratings vs. number of votes\n\n.panelset[\n\n::: {.cell layout-align=\"center\" panelset='[\"Plot\",\"Code\"]'}\n<div class=\"panel\">\n<div class=\"panel-name\">Code</div>\n\n```{.r .cell-code}\nggplot(office_ratings, aes(x = total_votes, y = imdb_rating, color = season)) +\n  geom_jitter(alpha = 0.7) +\n  labs(\n    title = \"The Office ratings\",\n    x = \"Total votes\",\n    y = \"IMDB Rating\",\n    color = \"Season\"\n  )\n```\n\n\n\n</div>\n\n<div class=\"panel\">\n<div class=\"panel-name\">Plot</div>\n\n::: {.cell-output-display}\n![](u4-d09-cross-validation_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=55%}\n:::\n\n\n\n</div>\n:::\n\n]\n\n\n---\n\n## Outliers\n\n.panelset[\n::: {.cell layout-align=\"center\" panelset='[\"Plot\",\"Code\"]'}\n<div class=\"panel\">\n<div class=\"panel-name\">Code</div>\n\n```{.r .cell-code}\nggplot(office_ratings, aes(x = total_votes, y = imdb_rating)) +\n  geom_jitter() +\n  gghighlight(total_votes > 4000, label_key = title) +\n  labs(\n    title = \"The Office ratings\",\n    x = \"Total votes\",\n    y = \"IMDB Rating\"\n  )\n```\n\n\n\n</div>\n\n<div class=\"panel\">\n<div class=\"panel-name\">Plot</div>\n\n::: {.cell-output-display}\n![](u4-d09-cross-validation_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=55%}\n:::\n\n\n\n</div>\n:::\n]\n\n.footnote[\n.small[\nIf you like the [Dinner Party](https://www.imdb.com/title/tt1031477/) episode, I highly recommend this [\"oral history\"](https://www.rollingstone.com/tv/tv-features/that-one-night-the-oral-history-of-the-greatest-office-episode-ever-629472/) of the episode published on Rolling Stone magazine.\n]\n]\n\n---\n\n\n## IMDB ratings vs. seasons\n\n.panelset[\n\n::: {.cell layout-align=\"center\" panelset='[\"Plot\",\"Code\"]'}\n<div class=\"panel\">\n<div class=\"panel-name\">Code</div>\n\n```{.r .cell-code}\nggplot(office_ratings, aes(x = factor(season), y = imdb_rating, color = season)) +\n  geom_boxplot() +\n  geom_jitter() +\n  guides(color = \"none\") +\n  labs(\n    title = \"The Office ratings\",\n    x = \"Season\",\n    y = \"IMDB Rating\"\n  )\n```\n\n\n\n</div>\n\n<div class=\"panel\">\n<div class=\"panel-name\">Plot</div>\n\n::: {.cell-output-display}\n![](u4-d09-cross-validation_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=55%}\n:::\n\n\n\n</div>\n:::\n\n]\n\n\n---\n\nclass: middle\n\n# Modeling\n\n---\n\n\n## Train / test\n\n- Create an initial split\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(1122)\noffice_split <- initial_split(office_ratings) # prop = 3/4 by default\n```\n:::\n\n\n--\n.pull-left[\n- Save training data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_train <- training(office_split)\ndim(office_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 141   6\n```\n:::\n:::\n\n]\n\n--\n.pull-right[\n- Save testing data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_test  <- testing(office_split)\ndim(office_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 47  6\n```\n:::\n:::\n\n]\n\n\n---\n\n## Specify model\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_mod <- linear_reg() %>%\n  set_engine(\"lm\")\n\noffice_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n---\n\n\n## Build recipe\n\n.panelset[\n.panel[.panel-name[Code]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_rec <- recipe(imdb_rating ~ ., data = office_train) %>%\n  # title isn't a predictor, but keep around to ID\n  update_role(title, new_role = \"ID\") %>%\n  # extract month of air_date\n  step_date(air_date, features = \"month\") %>%\n  step_rm(air_date) %>%\n  # make dummy variables of month \n  step_dummy(contains(\"month\")) %>%\n  # remove zero variance predictors\n  step_zv(all_predictors())\n```\n:::\n\n]\n.panel[.panel-name[Output]\n.small[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_rec\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        ID          1\n   outcome          1\n predictor          4\n\nOperations:\n\nDate features from air_date\nVariables removed air_date\nDummy variables from contains(\"month\")\nZero variance filter on all_predictors()\n```\n:::\n:::\n\n]\n]\n]\n\n\n---\n\n## Build workflow\n\n.panelset[\n.panel[.panel-name[Code]\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_wflow <- workflow() %>%\n  add_model(office_mod) %>%\n  add_recipe(office_rec)\n```\n:::\n]\n.panel[.panel-name[Output]\n.small[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_wflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ═════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: linear_reg()\n\n── Preprocessor ─────────────────────────────────────────────────\n4 Recipe Steps\n\n• step_date()\n• step_rm()\n• step_dummy()\n• step_zv()\n\n── Model ────────────────────────────────────────────────────────\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n]\n]\n]\n\n---\n\n\n## Fit model\n\n.panelset[\n.panel[.panel-name[Code]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_fit <- office_wflow %>%\n  fit(data = office_train)\n```\n:::\n\n]\n.panel[.panel-name[Output]\n.small[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntidy(office_fit) %>%\n  print(n = 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 5\n   term                estimate std.error statistic  p.value\n   <chr>                  <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)         7.23     0.205        35.4   3.14e-68\n 2 season             -0.0499   0.0157       -3.18  1.86e- 3\n 3 episode             0.0353   0.0101        3.50  6.44e- 4\n 4 total_votes         0.000352 0.0000448     7.85  1.39e-12\n 5 air_date_month_Feb  0.0242   0.147         0.165 8.69e- 1\n 6 air_date_month_Mar -0.145    0.144        -1.01  3.16e- 1\n 7 air_date_month_Apr -0.106    0.140        -0.759 4.49e- 1\n 8 air_date_month_May  0.0575   0.175         0.329 7.43e- 1\n 9 air_date_month_Sep  0.440    0.191         2.30  2.30e- 2\n10 air_date_month_Oct  0.321    0.150         2.13  3.50e- 2\n11 air_date_month_Nov  0.237    0.138         1.72  8.81e- 2\n12 air_date_month_Dec  0.443    0.190         2.34  2.09e- 2\n```\n:::\n:::\n\n]\n]\n]\n\n\n---\n\nclass: middle\n\n# Evaluate model\n\n---\n\n\n## Make predictions for training data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_train_pred <- predict(office_fit, office_train) %>%\n  bind_cols(office_train %>% select(imdb_rating, title))\n\noffice_train_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 141 × 3\n  .pred imdb_rating title            \n  <dbl>       <dbl> <chr>            \n1  7.90         8.1 Garden Party     \n2  8.43         7.9 The Chump        \n3  7.81         7.1 Here Comes Treble\n4  7.94         6.7 Get the Girl     \n5  7.92         7.9 Tallahassee      \n6  8.29         7.7 The Inner Circle \n# … with 135 more rows\n```\n:::\n:::\n\n---\n\n## R-squared\n\nPercentage of variability in the IMDB ratings explained by the model\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrsq(office_train_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.500\n```\n:::\n:::\n\n--\n\n.question[\nAre models with high or low $R^2$ more preferable?\n]\n\n---\n\n\n## RMSE\n\nAn alternative model performance statistic: **root mean square error**\n\n\n$$ RMSE = \\sqrt{\\frac{\\sum_{i = 1}^n (y_i - \\hat{y}_i)^2}{n}} $$\n\n\n--\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrmse(office_train_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.373\n```\n:::\n:::\n\n\n--\n\n.question[\nAre models with high or low RMSE are more preferable?\n]\n\n\n---\n\n## Interpreting RMSE\n\n.question[\nIs this RMSE considered low or high?\n]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrmse(office_train_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.373\n```\n:::\n:::\n\n--\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_train %>%\n  summarise(min = min(imdb_rating), max = max(imdb_rating))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n    min   max\n  <dbl> <dbl>\n1   6.7   9.7\n```\n:::\n:::\n\n---\n\n\nclass: middle\n\n.hand[\n.light-blue[\nbut, really, who cares about predictions on .pink[training] data?\n]\n]\n\n\n---\n\n## Make predictions for testing data\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffice_test_pred <- predict(office_fit, office_test) %>%\n  bind_cols(office_test %>% select(imdb_rating, title))\n\noffice_test_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 47 × 3\n  .pred imdb_rating title          \n  <dbl>       <dbl> <chr>          \n1  8.52         8.4 Office Olympics\n2  8.54         8.6 The Client     \n3  8.90         8.8 Christmas Party\n4  8.71         9   The Injury     \n5  8.50         8.2 Boys and Girls \n6  8.46         8.4 Dwight's Speech\n# … with 41 more rows\n```\n:::\n:::\n\n---\n\n\n## Evaluate performance on testing data\n\n- RMSE of model fit to testing data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrmse(office_test_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.386\n```\n:::\n:::\n\n\n- $R^2$ of model fit to testing data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrsq(office_test_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.556\n```\n:::\n:::\n\n---\n\n## Training vs. testing\n\n<br>\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|metric    | train|  test|comparison                    |\n|:---------|-----:|-----:|:-----------------------------|\n|RMSE      | 0.373| 0.386|RMSE lower for training       |\n|R-squared | 0.500| 0.556|R-squared higher for training |\n:::\n:::\n\n---\n\n\n## Evaluating performance on training data\n\n-  The training set does not have the capacity to be a good arbiter of performance.\n\n--\n- It is not an independent piece of information; predicting the training set can only reflect what the model already knows.\n\n--\n- Suppose you give a class a test, then give them the answers, then provide the same test. The student scores on the second test do not accurately reflect what they know about the subject; these scores would probably be higher than their results on the first test.\n\n.footnote[\n.small[\nSource: [tidymodels.org](https://www.tidymodels.org/start/resampling/)\n]\n]\n\n\n---\n\nclass: middle\n\n# Cross validation\n\n---\n\n\n## Cross validation\n\nMore specifically, **v-fold cross validation**:\n\n- Shuffle your data v partitions\n- Use 1 partition for validation, and the remaining v-1 partitions for training\n- Repeat v times\n\n.footnote[\n.small[\nYou might also heard of this referred to as k-fold cross validation.\n]\n]\n\n\n---\n\n## Cross validation\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/cross-validation.png){fig-align='center' width=100%}\n:::\n:::\n\n---\n\n\n## Split data into folds\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(345)\n\nfolds <- vfold_cv(office_train, v = 5)\nfolds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  5-fold cross-validation \n# A tibble: 5 × 2\n  splits           id   \n  <list>           <chr>\n1 <split [112/29]> Fold1\n2 <split [113/28]> Fold2\n3 <split [113/28]> Fold3\n4 <split [113/28]> Fold4\n5 <split [113/28]> Fold5\n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](img/cross-validation.png){fig-align='right' width=100%}\n:::\n:::\n\n]\n\n\n---\n\n## Fit resamples\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(456)\n\noffice_fit_rs <- office_wflow %>%\n  fit_resamples(folds)\n\noffice_fit_rs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Resampling results\n# 5-fold cross-validation \n# A tibble: 5 × 4\n  splits           id    .metrics         .notes          \n  <list>           <chr> <list>           <list>          \n1 <split [112/29]> Fold1 <tibble [2 × 4]> <tibble [0 × 3]>\n2 <split [113/28]> Fold2 <tibble [2 × 4]> <tibble [0 × 3]>\n3 <split [113/28]> Fold3 <tibble [2 × 4]> <tibble [0 × 3]>\n4 <split [113/28]> Fold4 <tibble [2 × 4]> <tibble [0 × 3]>\n5 <split [113/28]> Fold5 <tibble [2 × 4]> <tibble [0 × 3]>\n```\n:::\n:::\n]\n.pull-right[\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](img/cross-validation-animated.gif){fig-align='right' width=100%}\n:::\n:::\n]\n\n---\n\n\n## Collect CV metrics\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncollect_metrics(office_fit_rs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1 rmse    standard   0.403     5  0.0336 Preprocessor1_Model1\n2 rsq     standard   0.413     5  0.0727 Preprocessor1_Model1\n```\n:::\n:::\n\n---\n\n## Deeper look into CV metrics\n\n.panelset[\n.panel[.panel-name[Raw]\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncollect_metrics(office_fit_rs, summarize = FALSE) %>%\n  print(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n   id    .metric .estimator .estimate .config             \n   <chr> <chr>   <chr>          <dbl> <chr>               \n 1 Fold1 rmse    standard       0.430 Preprocessor1_Model1\n 2 Fold1 rsq     standard       0.134 Preprocessor1_Model1\n 3 Fold2 rmse    standard       0.368 Preprocessor1_Model1\n 4 Fold2 rsq     standard       0.496 Preprocessor1_Model1\n 5 Fold3 rmse    standard       0.452 Preprocessor1_Model1\n 6 Fold3 rsq     standard       0.501 Preprocessor1_Model1\n 7 Fold4 rmse    standard       0.289 Preprocessor1_Model1\n 8 Fold4 rsq     standard       0.529 Preprocessor1_Model1\n 9 Fold5 rmse    standard       0.475 Preprocessor1_Model1\n10 Fold5 rsq     standard       0.403 Preprocessor1_Model1\n```\n:::\n:::\n]\n.panel[.panel-name[Tidy]\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n|Fold  |  RMSE| R-squared|\n|:-----|-----:|---------:|\n|Fold1 | 0.430|     0.134|\n|Fold2 | 0.368|     0.496|\n|Fold3 | 0.452|     0.501|\n|Fold4 | 0.289|     0.529|\n|Fold5 | 0.475|     0.403|\n:::\n:::\n]\n]\n\n---\n\n\n## How does RMSE compare to y?\n\n- Cross validation RMSE stats\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n    min   max  mean   med     sd    IQR\n  <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>\n1 0.289 0.475 0.403 0.430 0.0751 0.0841\n```\n:::\n:::\n\n\n- Training data IMDB score stats\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n    min   max  mean   med    sd   IQR\n  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1   6.7   9.7  8.24   8.2 0.530 0.600\n```\n:::\n:::\n\n---\n\n## What's next?\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](img/post-cv-testing.png){fig-align='right' width=100%}\n:::\n:::\n\n",
    "supporting": [
      "u4-d09-cross-validation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/font-awesome/css/all.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/font-awesome/css/v4-shims.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/panelset/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/panelset/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}