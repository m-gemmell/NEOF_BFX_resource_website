{
  "hash": "e3de00084ccab408ae91a87736263c61",
  "result": {
    "markdown": "---\ntitle: \"Iteration\"\nsubtitle: \"<br><br> Data Science in a Box\"\nauthor: \"[datasciencebox.org](https://datasciencebox.org/)\"\noutput:\n  xaringan::moon_reader:\n    css: [\"../xaringan-themer.css\", \"../slides.css\"]\n    lib_dir: libs\n    anchor_sections: FALSE\n    nature:\n      ratio: \"16:9\"\n      highlightLines: true\n      highlightStyle: solarized-light\n      countIncrementalSlides: false\n---\n\n\n\n\nlayout: true\n  \n<div class=\"my-footer\">\n<span>\n<a href=\"https://datasciencebox.org\" target=\"_blank\">datasciencebox.org</a>\n</span>\n</div> \n\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nclass: middle\n\n# First Minister's COVID speeches\n\n\n---\n\n## üèÅ Start with\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/fm-speeches.png){fig-align='center' width=75%}\n:::\n:::\n\n---\n\n\n## End with üõë\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 218 √ó 6\n   title                 date       location abstract text  url  \n   <chr>                 <date>     <chr>    <chr>    <chr> <chr>\n 1 Coronavirus (COVID-1‚Ä¶ 2021-04-20 St Andr‚Ä¶ Stateme‚Ä¶ \"Goo‚Ä¶ http‚Ä¶\n 2 Coronavirus (COVID-1‚Ä¶ 2021-04-13 St Andr‚Ä¶ Stateme‚Ä¶ \"Tha‚Ä¶ http‚Ä¶\n 3 Coronavirus (COVID-1‚Ä¶ 2021-04-06 St Andr‚Ä¶ Stateme‚Ä¶ \"Goo‚Ä¶ http‚Ä¶\n 4 Coronavirus (COVID-1‚Ä¶ 2021-03-30 St Andr‚Ä¶ Stateme‚Ä¶ \"Tha‚Ä¶ http‚Ä¶\n 5 Coronavirus (COVID-1‚Ä¶ 2021-03-24 Scottis‚Ä¶ Stateme‚Ä¶ \"Tha‚Ä¶ http‚Ä¶\n 6 Coronavirus (Covid-1‚Ä¶ 2021-03-23 The Sco‚Ä¶ Stateme‚Ä¶ \"Pre‚Ä¶ http‚Ä¶\n 7 Coronavirus (COVID-1‚Ä¶ 2021-03-18 Scottis‚Ä¶ Stateme‚Ä¶ \"Tha‚Ä¶ http‚Ä¶\n 8 Coronavirus (COVID-1‚Ä¶ 2021-03-17 St Andr‚Ä¶ Stateme‚Ä¶ \"\\nG‚Ä¶ http‚Ä¶\n 9 Coronavirus (COVID-1‚Ä¶ 2021-03-16 Scottis‚Ä¶ Stateme‚Ä¶ \"Pre‚Ä¶ http‚Ä¶\n10 Coronavirus (COVID-1‚Ä¶ 2021-03-15 St Andr‚Ä¶ Stateme‚Ä¶ \"\\nG‚Ä¶ http‚Ä¶\n11 Coronavirus (COVID-1‚Ä¶ 2021-03-11 Scottis‚Ä¶ Stateme‚Ä¶ \"I c‚Ä¶ http‚Ä¶\n12 Coronavirus (COVID-1‚Ä¶ 2021-03-09 Scottis‚Ä¶ Stateme‚Ä¶ \"Pre‚Ä¶ http‚Ä¶\n13 Coronavirus (COVID-1‚Ä¶ 2021-03-05 Scottis‚Ä¶ Parliam‚Ä¶ \"Hel‚Ä¶ http‚Ä¶\n14 Coronavirus (COVID-1‚Ä¶ 2021-03-04 Scottis‚Ä¶ Parliam‚Ä¶ \"I w‚Ä¶ http‚Ä¶\n15 Coronavirus (COVID-1‚Ä¶ 2021-03-02 Scottis‚Ä¶ Stateme‚Ä¶ \"Pre‚Ä¶ http‚Ä¶\n# ‚Ä¶ with 203 more rows\n```\n:::\n:::\n\n---\n\n## Define `scrape_speech()`\n\n.pull-left-wide[\n.small[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscrape_speech <- function(url) {\n  \n  speech_page <- read_html(url)\n\n  title <- speech_page %>%\n    html_node(\".article-header__title\") %>%\n    html_text()\n\n  date <- speech_page %>%\n    html_node(\".content-data__list:nth-child(1) strong\") %>%\n    html_text() %>%\n    dmy()\n\n  location <- speech_page %>%\n    html_node(\".content-data__list+ .content-data__list strong\") %>%\n    html_text()\n\n  abstract <- speech_page %>%\n    html_node(\".leader--first-para p\") %>%\n    html_text()\n\n  text <- speech_page %>%\n    html_nodes(\"#preamble p\") %>%\n    html_text() %>%\n    list()\n\n  tibble(\n    title = title, date = date, location = location,\n    abstract = abstract, text = text, url = url\n  )\n}\n```\n:::\n]\n]\n\n---\n\n\n## Use `scrape_speech()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nurl_26_oct <- \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-speech-26-october/\"\nscrape_speech(url = url_26_oct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 √ó 6\n  title date   location abstract text       url                  \n  <chr> <date> <chr>    <chr>    <list>     <chr>                \n1 <NA>  NA     <NA>     <NA>     <chr [47]> https://www.gov.scot‚Ä¶\n```\n:::\n\n```{.r .cell-code}\nurl_23_oct <- \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-speech-23-october/\"\nscrape_speech(url = url_23_oct)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 √ó 6\n  title date   location abstract text        url                 \n  <chr> <date> <chr>    <chr>    <list>      <chr>               \n1 <NA>  NA     <NA>     <NA>     <chr [134]> https://www.gov.sco‚Ä¶\n```\n:::\n:::\n\n---\n\nclass: middle\n\n# Inputs\n\n---\n\n\n## Inputs\n\n.question[\nYou now have a function that will scrape the relevant info on speeches given the URL of the page of the speech. Where can we get a list of URLs of each of the speeches?\n]\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/fm-speeches-links.png){fig-align='center' width=60%}\n:::\n:::\n\n---\n\n## All URLs\n\n::: {.cell layout-align=\"center\" output.lines='10'}\n\n```{.r .cell-code}\nall_speeches_page <- read_html(\"https://www.gov.scot/collections/first-ministers-speeches/\")\n\nall_speeches_page %>%\n  html_nodes(\".collections-list a\") %>%\n  html_attr(\"href\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"/publications/gathering-first-ministers-speech-15-june-2022/\"                                        \n  [2] \"/publications/scdi-forum-first-ministers-speech-13-june-2022/\"                                       \n  [3] \"/publications/queens-platinum-jubilee-debate-first-ministers-statement/\"                             \n  [4] \"/publications/federation-small-businesses-awards-2022-first-ministers-speech-19-2022/\"               \n  [5] \"/publications/scotlands-place-world-first-ministers-speech-16-2022-1/\"                               \n  [6] \"/publications/energy-conference-first-ministers-speech-11-2022/\"                                     \n  [7] \"/publications/fm-statement-parliament-march-30-2022/\"                                                \n  [8] \"/publications/first-minister-speech-national-economic-forum-2022/\"                                   \n  [9] \"/publications/ukraine-update-first-ministers-statement-16-march-2022/\"                               \n [10] \"/publications/fm-statement-parliament-march-15-2022/\"                                                \n...\n```\n:::\n:::\n\n---\n\n\n## COVID-19 URLs *fragments*\n\n\n::: {.cell layout-align=\"center\" output.lines='10'}\n\n```{.r .cell-code}\nall_speeches_page %>%\n  html_nodes(\".collections-list a\") %>%\n  html_attr(\"href\") %>%\n  str_subset(\"covid-19\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"/publications/coronavirus-covid-19-update-first-ministers-speech-tuesday-22-february-2022/\"     \n  [2] \"/publications/coronavirus-covid-19-update-first-ministers-statement-8-february-2022/\"           \n  [3] \"/publications/coronavirus-covid-19-update-first-ministers-statement-1-february-2022/\"           \n  [4] \"/publications/coronavirus-covid-19-update-first-ministers-statement-25-january-2022/\"           \n  [5] \"/publications/coronavirus-covid-19-update-first-ministers-statement-18-january-2022/\"           \n  [6] \"/publications/coronavirus-covid-19-update-first-ministers-statement-11-january-2022/\"           \n  [7] \"/publications/coronavirus-covid-19-update-first-ministers-statement-5-january-2022/\"            \n  [8] \"/publications/coronavirus-covid-19-update-first-ministers-statement-21-december-2021/\"          \n  [9] \"/publications/coronavirus-covid-19-update-first-ministers-speech-17-december-2021/\"             \n [10] \"/publications/coronavirus-covid-19-update-first-ministers-statement-14-december-2021/\"          \n...\n```\n:::\n:::\n\n---\n\n## COVID-19 URLs\n\n::: {.cell layout-align=\"center\" output.lines='10'}\n\n```{.r .cell-code}\nall_speeches_page %>%\n  html_nodes(\".collections-list a\") %>%\n  html_attr(\"href\") %>%\n  str_subset(\"covid-19\") %>%\n  str_c(\"https://www.gov.scot\", .)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-speech-tuesday-22-february-2022/\"     \n  [2] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-8-february-2022/\"           \n  [3] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-1-february-2022/\"           \n  [4] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-25-january-2022/\"           \n  [5] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-18-january-2022/\"           \n  [6] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-11-january-2022/\"           \n  [7] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-5-january-2022/\"            \n  [8] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-21-december-2021/\"          \n  [9] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-speech-17-december-2021/\"             \n [10] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-14-december-2021/\"          \n...\n```\n:::\n:::\n\n---\n\n\n## Save COVID-19 URLs\n\n\n::: {.cell layout-align=\"center\" output.lines='10'}\n\n```{.r .cell-code}\ncovid_speech_urls <- all_speeches_page %>%\n  html_nodes(\".collections-list a\") %>%\n  html_attr(\"href\") %>%\n  str_subset(\"covid-19\") %>%\n  str_c(\"https://www.gov.scot\", .)\n\ncovid_speech_urls\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-speech-tuesday-22-february-2022/\"     \n  [2] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-8-february-2022/\"           \n  [3] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-1-february-2022/\"           \n  [4] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-25-january-2022/\"           \n  [5] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-18-january-2022/\"           \n  [6] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-11-january-2022/\"           \n  [7] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-5-january-2022/\"            \n  [8] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-21-december-2021/\"          \n  [9] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-speech-17-december-2021/\"             \n [10] \"https://www.gov.scot/publications/coronavirus-covid-19-update-first-ministers-statement-14-december-2021/\"          \n...\n```\n:::\n:::\n\n---\n\nclass: middle\n\n# Iteration\n\n---\n\n\n## Define the task\n\n- Goal: Scrape info on all COVID-19 speeches of the First Minister\n- So far:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscrape_speech(covid_speech_urls[1])\nscrape_speech(covid_speech_urls[2])\nscrape_speech(covid_speech_urls[3])\n```\n:::\n\n- What else do we need to do?\n  - Run the `scrape_speech()` function on all COVID-19 speech links\n  - Combine the resulting data frames from each run into one giant data frame\n\n\n---\n\n## Iteration\n\n.question[\nHow can we tell R to apply the `scrape_speech()` function to each link in `covid_speech_urls`?\n]\n\n--\n\n- Option 1: Write a **for loop**, i.e. explicitly tell R to visit a link, apply the function, store the result, then visit the next link, apply the function, append the result to the stored result from the previous link, and so on and so forth.\n--\n\n- Option 2: **Map** the function to each element in the list of links, and let R take care of the storing and appending of results.\n--\n\n- We'll go with Option 2!\n\n---\n\n\n## How does mapping work?\n\nSuppose we have exam 1 and exam 2 scores of 4 students stored in a list...\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexam_scores <- list(\n  exam1 <- c(80, 90, 70, 50),\n  exam2 <- c(85, 83, 45, 60)\n)\n```\n:::\n\n\n--\n\n...and we find the mean score in each exam\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmap(exam_scores, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 72.5\n\n[[2]]\n[1] 68.25\n```\n:::\n:::\n\n---\n\n...and suppose we want the results as a numeric (double) vector\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmap_dbl(exam_scores, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 72.50 68.25\n```\n:::\n:::\n\n...or as a character string\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmap_chr(exam_scores, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"72.500000\" \"68.250000\"\n```\n:::\n:::\n\n---\n\n\n## `map_something`\n\nFunctions for looping over an object and returning a value (of a specific type):\n\n* `map()` - returns a list\n* `map_lgl()` - returns a logical vector\n* `map_int()` - returns a integer vector\n* `map_dbl()` - returns a double vector\n* `map_chr()` - returns a character vector\n* `map_df()` / `map_dfr()` - returns a data frame by row binding\n* `map_dfc()` - returns a data frame by column binding\n* ...\n\n\n---\n\n## Go to each page, scrape speech\n\n- Map the `scrape_speech()` function\n- to each element of `covid_speech_urls`\n- and return a data frame by row binding\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncovid_speeches <- map_dfr(covid_speech_urls, scrape_speech)\n```\n:::\n\n---\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncovid_speeches %>%\n  print(n = 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 218 √ó 6\n   title                 date       location abstract text  url  \n   <chr>                 <date>     <chr>    <chr>    <chr> <chr>\n 1 Coronavirus (COVID-1‚Ä¶ 2021-04-20 St Andr‚Ä¶ Stateme‚Ä¶ \"Goo‚Ä¶ http‚Ä¶\n 2 Coronavirus (COVID-1‚Ä¶ 2021-04-13 St Andr‚Ä¶ Stateme‚Ä¶ \"Tha‚Ä¶ http‚Ä¶\n 3 Coronavirus (COVID-1‚Ä¶ 2021-04-06 St Andr‚Ä¶ Stateme‚Ä¶ \"Goo‚Ä¶ http‚Ä¶\n 4 Coronavirus (COVID-1‚Ä¶ 2021-03-30 St Andr‚Ä¶ Stateme‚Ä¶ \"Tha‚Ä¶ http‚Ä¶\n 5 Coronavirus (COVID-1‚Ä¶ 2021-03-24 Scottis‚Ä¶ Stateme‚Ä¶ \"Tha‚Ä¶ http‚Ä¶\n 6 Coronavirus (Covid-1‚Ä¶ 2021-03-23 The Sco‚Ä¶ Stateme‚Ä¶ \"Pre‚Ä¶ http‚Ä¶\n 7 Coronavirus (COVID-1‚Ä¶ 2021-03-18 Scottis‚Ä¶ Stateme‚Ä¶ \"Tha‚Ä¶ http‚Ä¶\n 8 Coronavirus (COVID-1‚Ä¶ 2021-03-17 St Andr‚Ä¶ Stateme‚Ä¶ \"\\nG‚Ä¶ http‚Ä¶\n 9 Coronavirus (COVID-1‚Ä¶ 2021-03-16 Scottis‚Ä¶ Stateme‚Ä¶ \"Pre‚Ä¶ http‚Ä¶\n10 Coronavirus (COVID-1‚Ä¶ 2021-03-15 St Andr‚Ä¶ Stateme‚Ä¶ \"\\nG‚Ä¶ http‚Ä¶\n11 Coronavirus (COVID-1‚Ä¶ 2021-03-11 Scottis‚Ä¶ Stateme‚Ä¶ \"I c‚Ä¶ http‚Ä¶\n12 Coronavirus (COVID-1‚Ä¶ 2021-03-09 Scottis‚Ä¶ Stateme‚Ä¶ \"Pre‚Ä¶ http‚Ä¶\n13 Coronavirus (COVID-1‚Ä¶ 2021-03-05 Scottis‚Ä¶ Parliam‚Ä¶ \"Hel‚Ä¶ http‚Ä¶\n14 Coronavirus (COVID-1‚Ä¶ 2021-03-04 Scottis‚Ä¶ Parliam‚Ä¶ \"I w‚Ä¶ http‚Ä¶\n15 Coronavirus (COVID-1‚Ä¶ 2021-03-02 Scottis‚Ä¶ Stateme‚Ä¶ \"Pre‚Ä¶ http‚Ä¶\n# ‚Ä¶ with 203 more rows\n```\n:::\n:::\n\n---\n\n## What could go wrong?\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncovid_speeches <- map_dfr(covid_speech_urls, scrape_speech)\n```\n:::\n\n- This will take a while to run\n- If you get `HTTP Error 429 (Too many requests)` you might want to slow down your hits by modifying your function to slow it down by adding a random wait (sleep) time between hitting each link\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscrape_speech <- function(url){\n  \n  # Sleep for randomly generated number of seconds\n  # Generated from a uniform distribution between 0 and 1\n  Sys.sleep(runif(1)) #<<\n  \n  # Rest of your function code goes here...\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/font-awesome/css/all.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/font-awesome/css/v4-shims.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/panelset/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/panelset/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}