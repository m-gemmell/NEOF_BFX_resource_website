{
  "hash": "93870cfac2bf18ef1668cf0c84474a4c",
  "result": {
    "markdown": "---\ntitle: \"Working with a single data frame\"\nsubtitle: \"<br><br> Data Science in a Box\"\nauthor: \"[datasciencebox.org](https://datasciencebox.org/)\"\noutput:\n  xaringan::moon_reader:\n    css: [\"../xaringan-themer.css\", \"../slides.css\"]\n    lib_dir: libs\n    nature:\n      ratio: \"16:9\"\n      highlightLines: true\n      highlightStyle: solarized-light\n      countIncrementalSlides: false\n---\n\n\n\n\nlayout: true\n  \n<div class=\"my-footer\">\n<span>\n<a href=\"https://datasciencebox.org\" target=\"_blank\">datasciencebox.org</a>\n</span>\n</div> \n\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nclass: middle\n\n# .hand[We...]\n\n.huge[.green[have]] .hand[a single data frame]\n\n.huge[.pink[want]] .hand[to slice it, and dice it, and juice it, and process it]\n\n\n---\n\n## Data: Hotel bookings\n\n- Data from two hotels: one resort and one city hotel\n- Observations: Each row represents a hotel booking\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels <- read_csv(\"data/hotels.csv\")\n```\n:::\n\n---\n\n\nclass: middle\n\n# `select`, `arrange`, and `slice`\n\n\n---\n\n## `select` to keep variables\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(hotel, lead_time) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 2\n  hotel        lead_time\n  <chr>            <dbl>\n1 Resort Hotel       342\n2 Resort Hotel       737\n3 Resort Hotel         7\n4 Resort Hotel        13\n5 Resort Hotel        14\n6 Resort Hotel        14\n# … with 119,384 more rows\n```\n:::\n:::\n\n---\n\n\n## `select` to exclude variables\n\n.small[\n\n::: {.cell layout-align=\"center\" output.lines='18'}\n\n```{.r .cell-code}\nhotels %>%\n  select(-agent) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 31\n  hotel   is_canceled lead_time arrival_date_ye… arrival_date_mo…\n  <chr>         <dbl>     <dbl>            <dbl> <chr>           \n1 Resort…           0       342             2015 July            \n2 Resort…           0       737             2015 July            \n3 Resort…           0         7             2015 July            \n4 Resort…           0        13             2015 July            \n5 Resort…           0        14             2015 July            \n6 Resort…           0        14             2015 July            \n# … with 119,384 more rows, and 26 more variables:\n#   arrival_date_week_number <dbl>,\n#   arrival_date_day_of_month <dbl>,\n#   stays_in_weekend_nights <dbl>, stays_in_week_nights <dbl>,\n#   adults <dbl>, children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>, …\n```\n:::\n:::\n\n]\n\n\n---\n\n## `select` a range of variables\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(hotel:arrival_date_month) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 5\n  hotel   is_canceled lead_time arrival_date_ye… arrival_date_mo…\n  <chr>         <dbl>     <dbl>            <dbl> <chr>           \n1 Resort…           0       342             2015 July            \n2 Resort…           0       737             2015 July            \n3 Resort…           0         7             2015 July            \n4 Resort…           0        13             2015 July            \n5 Resort…           0        14             2015 July            \n6 Resort…           0        14             2015 July            \n# … with 119,384 more rows\n```\n:::\n:::\n\n---\n\n\n## `select` variables with certain characteristics\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(starts_with(\"arrival\")) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 4\n  arrival_date_year arrival_date_month arrival_date_week_number\n              <dbl> <chr>                                 <dbl>\n1              2015 July                                     27\n2              2015 July                                     27\n3              2015 July                                     27\n4              2015 July                                     27\n5              2015 July                                     27\n6              2015 July                                     27\n# … with 119,384 more rows, and 1 more variable:\n#   arrival_date_day_of_month <dbl>\n```\n:::\n:::\n\n---\n\n## `select` variables with certain characteristics\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(ends_with(\"type\")) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 4\n  reserved_room_type assigned_room_ty… deposit_type customer_type\n  <chr>              <chr>             <chr>        <chr>        \n1 C                  C                 No Deposit   Transient    \n2 C                  C                 No Deposit   Transient    \n3 A                  C                 No Deposit   Transient    \n4 A                  A                 No Deposit   Transient    \n5 A                  A                 No Deposit   Transient    \n6 A                  A                 No Deposit   Transient    \n# … with 119,384 more rows\n```\n:::\n:::\n\n---\n\n\n## Select helpers\n\n- `starts_with()`: Starts with a prefix\n- `ends_with()`: Ends with a suffix\n- `contains()`: Contains a literal string\n- `num_range()`: Matches a numerical range like x01, x02, x03\n- `one_of()`: Matches variable names in a character vector\n- `everything()`: Matches all variables\n- `last_col()`: Select last variable, possibly with an offset\n- `matches()`: Matches a regular expression (a sequence of symbols/characters expressing a string/pattern to be searched for within text)\n\n.footnote[\nSee help for any of these functions for more info, e.g. `?everything`.\n]\n\n\n---\n\n## `arrange` in ascending / descending order\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(adults, children, babies) %>%\n  arrange(babies) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 3\n  adults children babies\n   <dbl>    <dbl>  <dbl>\n1      2        0      0\n2      2        0      0\n3      1        0      0\n4      1        0      0\n5      2        0      0\n6      2        0      0\n# … with 119,384 more rows\n```\n:::\n:::\n]\n.pull-right[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(adults, children, babies) %>%\n  arrange(desc(babies)) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 3\n  adults children babies\n   <dbl>    <dbl>  <dbl>\n1      2        0     10\n2      1        0      9\n3      2        0      2\n4      2        0      2\n5      2        0      2\n6      2        0      2\n# … with 119,384 more rows\n```\n:::\n:::\n]\n\n---\n\n\n## `slice` for certain row numbers\n\n.midi[\n\n::: {.cell layout-align=\"center\" output.lines='17'}\n\n```{.r .cell-code}\n# first five\nhotels %>%\n  slice(1:5) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 32\n  hotel   is_canceled lead_time arrival_date_ye… arrival_date_mo…\n  <chr>         <dbl>     <dbl>            <dbl> <chr>           \n1 Resort…           0       342             2015 July            \n2 Resort…           0       737             2015 July            \n3 Resort…           0         7             2015 July            \n4 Resort…           0        13             2015 July            \n5 Resort…           0        14             2015 July            \n# … with 27 more variables: arrival_date_week_number <dbl>,\n#   arrival_date_day_of_month <dbl>,\n#   stays_in_weekend_nights <dbl>, stays_in_week_nights <dbl>,\n#   adults <dbl>, children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>,\n#   previous_cancellations <dbl>, …\n```\n:::\n:::\n\n]\n\n\n---\n\n.tip[\nIn R, you can use the `#` for adding comments to your code. \nAny text following `#` will be printed as is, and won't be run as R code.\nThis is useful for leaving comments in your code and for temporarily disabling \ncertain lines of code while debugging.\n]\n\n.small[\n::: {.cell layout-align=\"center\" output.lines='10'}\n\n```{.r .cell-code}\nhotels %>%\n  # slice the first five rows  # this line is a comment\n  #select(hotel) %>%           # this one doesn't run\n  slice(1:5)                   # this line runs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 32\n  hotel   is_canceled lead_time arrival_date_ye… arrival_date_mo…\n  <chr>         <dbl>     <dbl>            <dbl> <chr>           \n1 Resort…           0       342             2015 July            \n2 Resort…           0       737             2015 July            \n3 Resort…           0         7             2015 July            \n4 Resort…           0        13             2015 July            \n5 Resort…           0        14             2015 July            \n# … with 27 more variables: arrival_date_week_number <dbl>,\n#   arrival_date_day_of_month <dbl>,\n...\n```\n:::\n:::\n]\n\n---\n\n\nclass: middle\n\n# `filter`\n\n\n---\n\n## `filter` to select a subset of rows\n\n.midi[\n::: {.cell layout-align=\"center\" output.lines='17'}\n\n```{.r .cell-code}\n# bookings in City Hotels\nhotels %>%\n  filter(hotel == \"City Hotel\") #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 79,330 × 32\n  hotel   is_canceled lead_time arrival_date_ye… arrival_date_mo…\n  <chr>         <dbl>     <dbl>            <dbl> <chr>           \n1 City H…           0         6             2015 July            \n2 City H…           1        88             2015 July            \n3 City H…           1        65             2015 July            \n4 City H…           1        92             2015 July            \n5 City H…           1       100             2015 July            \n6 City H…           1        79             2015 July            \n# … with 79,324 more rows, and 27 more variables:\n#   arrival_date_week_number <dbl>,\n#   arrival_date_day_of_month <dbl>,\n#   stays_in_weekend_nights <dbl>, stays_in_week_nights <dbl>,\n#   adults <dbl>, children <dbl>, babies <dbl>, meal <chr>,\n#   country <chr>, market_segment <chr>,\n#   distribution_channel <chr>, is_repeated_guest <dbl>, …\n```\n:::\n:::\n]\n\n---\n\n## `filter` for many conditions at once\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  filter( \n    adults == 0,     #<<\n    children >= 1    #<<\n    ) %>% \n  select(adults, babies, children)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 223 × 3\n  adults babies children\n   <dbl>  <dbl>    <dbl>\n1      0      0        3\n2      0      0        2\n3      0      0        2\n4      0      0        2\n5      0      0        2\n6      0      0        3\n# … with 217 more rows\n```\n:::\n:::\n\n---\n\n\n## `filter` for more complex conditions\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# bookings with no adults and some children or babies in the room\nhotels %>%\n  filter( \n    adults == 0,     \n    children >= 1 | babies >= 1     # | means or  #<<\n    ) %>%\n  select(adults, babies, children)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 223 × 3\n  adults babies children\n   <dbl>  <dbl>    <dbl>\n1      0      0        3\n2      0      0        2\n3      0      0        2\n4      0      0        2\n5      0      0        2\n6      0      0        3\n# … with 217 more rows\n```\n:::\n:::\n\n---\n\n## Logical operators in R\n\n<br>\n\noperator    | definition                   || operator     | definition\n------------|------------------------------||--------------|----------------\n`<`         | less than                    ||`x`&nbsp;&#124;&nbsp;`y`     | `x` OR `y` \n`<=`        |\tless than or equal to        ||`is.na(x)`    | test if `x` is `NA`\n`>`         | greater than                 ||`!is.na(x)`   | test if `x` is not `NA`\n`>=`        |\tgreater than or equal to     ||`x %in% y`    | test if `x` is in `y`\n`==`        |\texactly equal to             ||`!(x %in% y)` | test if `x` is not in `y`\n`!=`        |\tnot equal to                 ||`!x`          | not `x`\n`x & y`     | `x` AND `y`                  ||              |\n\n---\n\n\n.your-turn[\n### Your turn!\n\nTime to actually play around with the Hotels dataset!\n\n- Go to RStudio Cloud and start `AE 04 - Hotels + Data wrangling`.\n- Open the R Markdown document and complete Exercises 1 - 4.\n]\n\n\n---\n\nclass: middle\n\n# `distinct` and `count`\n\n---\n\n\n\n\n\n## `distinct` to filter for unique rows\n\n... and `arrange` to order alphabetically\n\n.small[\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>% \n  distinct(market_segment) %>% #<<\n  arrange(market_segment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 1\n  market_segment\n  <chr>         \n1 Aviation      \n2 Complementary \n3 Corporate     \n4 Direct        \n5 Groups        \n6 Offline TA/TO \n7 Online TA     \n8 Undefined     \n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\" output.lines='13'}\n\n```{.r .cell-code}\nhotels %>% \n  distinct(hotel, market_segment) %>% #<<\n  arrange(hotel, market_segment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 2\n   hotel        market_segment\n   <chr>        <chr>         \n 1 City Hotel   Aviation      \n 2 City Hotel   Complementary \n 3 City Hotel   Corporate     \n 4 City Hotel   Direct        \n 5 City Hotel   Groups        \n 6 City Hotel   Offline TA/TO \n 7 City Hotel   Online TA     \n 8 City Hotel   Undefined     \n 9 Resort Hotel Complementary \n10 Resort Hotel Corporate     \n...\n```\n:::\n:::\n\n]\n]\n\n\n---\n\n## `count` to create frequency tables\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# alphabetical order by default\nhotels %>%\n  count(market_segment) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  market_segment     n\n  <chr>          <int>\n1 Aviation         237\n2 Complementary    743\n3 Corporate       5295\n4 Direct         12606\n5 Groups         19811\n6 Offline TA/TO  24219\n7 Online TA      56477\n8 Undefined          2\n```\n:::\n:::\n]\n--\n.pull-right[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# descending frequency order\nhotels %>%\n  count(market_segment, sort = TRUE) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  market_segment     n\n  <chr>          <int>\n1 Online TA      56477\n2 Offline TA/TO  24219\n3 Groups         19811\n4 Direct         12606\n5 Corporate       5295\n6 Complementary    743\n7 Aviation         237\n8 Undefined          2\n```\n:::\n:::\n]\n\n---\n\n\n## `count` and `arrange`\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# ascending frequency order\nhotels %>%\n  count(market_segment) %>%\n  arrange(n) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  market_segment     n\n  <chr>          <int>\n1 Undefined          2\n2 Aviation         237\n3 Complementary    743\n4 Corporate       5295\n5 Direct         12606\n6 Groups         19811\n7 Offline TA/TO  24219\n8 Online TA      56477\n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# descending frequency order\n# just like adding sort = TRUE\nhotels %>%\n  count(market_segment) %>%\n  arrange(desc(n)) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 2\n  market_segment     n\n  <chr>          <int>\n1 Online TA      56477\n2 Offline TA/TO  24219\n3 Groups         19811\n4 Direct         12606\n5 Corporate       5295\n6 Complementary    743\n7 Aviation         237\n8 Undefined          2\n```\n:::\n:::\n\n]\n\n\n---\n\n## `count` for multiple variables\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  count(hotel, market_segment) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 3\n   hotel        market_segment     n\n   <chr>        <chr>          <int>\n 1 City Hotel   Aviation         237\n 2 City Hotel   Complementary    542\n 3 City Hotel   Corporate       2986\n 4 City Hotel   Direct          6093\n 5 City Hotel   Groups         13975\n 6 City Hotel   Offline TA/TO  16747\n 7 City Hotel   Online TA      38748\n 8 City Hotel   Undefined          2\n 9 Resort Hotel Complementary    201\n10 Resort Hotel Corporate       2309\n11 Resort Hotel Direct          6513\n12 Resort Hotel Groups          5836\n13 Resort Hotel Offline TA/TO   7472\n14 Resort Hotel Online TA      17729\n```\n:::\n:::\n\n---\n\n\n## order matters when you `count`\n\n.midi[\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# hotel type first\nhotels %>%\n  count(hotel, market_segment) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 3\n   hotel        market_segment     n\n   <chr>        <chr>          <int>\n 1 City Hotel   Aviation         237\n 2 City Hotel   Complementary    542\n 3 City Hotel   Corporate       2986\n 4 City Hotel   Direct          6093\n 5 City Hotel   Groups         13975\n 6 City Hotel   Offline TA/TO  16747\n 7 City Hotel   Online TA      38748\n 8 City Hotel   Undefined          2\n 9 Resort Hotel Complementary    201\n10 Resort Hotel Corporate       2309\n11 Resort Hotel Direct          6513\n12 Resort Hotel Groups          5836\n13 Resort Hotel Offline TA/TO   7472\n14 Resort Hotel Online TA      17729\n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# market segment first\nhotels %>%\n  count(market_segment, hotel) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 × 3\n   market_segment hotel            n\n   <chr>          <chr>        <int>\n 1 Aviation       City Hotel     237\n 2 Complementary  City Hotel     542\n 3 Complementary  Resort Hotel   201\n 4 Corporate      City Hotel    2986\n 5 Corporate      Resort Hotel  2309\n 6 Direct         City Hotel    6093\n 7 Direct         Resort Hotel  6513\n 8 Groups         City Hotel   13975\n 9 Groups         Resort Hotel  5836\n10 Offline TA/TO  City Hotel   16747\n11 Offline TA/TO  Resort Hotel  7472\n12 Online TA      City Hotel   38748\n13 Online TA      Resort Hotel 17729\n14 Undefined      City Hotel       2\n```\n:::\n:::\n\n]\n]\n\n\n---\n\n.your-turn[\n### Your turn!\n\n- Go back to RStudio Cloud and continue `AE 04 - Hotels + Data wrangling`.\n- Open the R Markdown document and complete Exercises 5 and 6.\n]\n\n---\n\n\nclass: middle\n\n# `mutate`\n\n\n---\n\n## `mutate` to add a new variable\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  mutate(little_ones = children + babies) %>% #<<\n  select(children, babies, little_ones) %>%\n  arrange(desc(little_ones))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 3\n  children babies little_ones\n     <dbl>  <dbl>       <dbl>\n1       10      0          10\n2        0     10          10\n3        0      9           9\n4        2      1           3\n5        2      1           3\n6        2      1           3\n# … with 119,384 more rows\n```\n:::\n:::\n\n---\n\n\n## Little ones in resort and city hotels\n\n.midi[\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Resort Hotel\nhotels %>%\n  mutate(little_ones = children + babies) %>%\n  filter(\n    little_ones >= 1,\n    hotel == \"Resort Hotel\"\n    ) %>%\n  select(hotel, little_ones)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3,929 × 2\n  hotel        little_ones\n  <chr>              <dbl>\n1 Resort Hotel           1\n2 Resort Hotel           2\n3 Resort Hotel           2\n4 Resort Hotel           2\n5 Resort Hotel           1\n6 Resort Hotel           1\n# … with 3,923 more rows\n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# City Hotel\nhotels %>%\n  mutate(little_ones = children + babies) %>%\n  filter(\n    little_ones >= 1,\n    hotel == \"City Hotel\"\n    )  %>%\n  select(hotel, little_ones)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5,403 × 2\n  hotel      little_ones\n  <chr>            <dbl>\n1 City Hotel           1\n2 City Hotel           1\n3 City Hotel           2\n4 City Hotel           1\n5 City Hotel           1\n6 City Hotel           1\n# … with 5,397 more rows\n```\n:::\n:::\n\n]\n]\n\n\n---\n\n.question[\nWhat is happening in the following chunk?\n]\n\n.midi[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  mutate(little_ones = children + babies) %>%\n  count(hotel, little_ones) %>%\n  mutate(prop = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   hotel        little_ones     n       prop\n   <chr>              <dbl> <int>      <dbl>\n 1 City Hotel             0 73923 0.619     \n 2 City Hotel             1  3263 0.0273    \n 3 City Hotel             2  2056 0.0172    \n 4 City Hotel             3    82 0.000687  \n 5 City Hotel             9     1 0.00000838\n 6 City Hotel            10     1 0.00000838\n 7 City Hotel            NA     4 0.0000335 \n 8 Resort Hotel           0 36131 0.303     \n 9 Resort Hotel           1  2183 0.0183    \n10 Resort Hotel           2  1716 0.0144    \n11 Resort Hotel           3    29 0.000243  \n12 Resort Hotel          10     1 0.00000838\n```\n:::\n:::\n]\n\n---\n\n\nclass: middle\n\n# `summarise` and `group_by`\n\n\n---\n\n## `summarise` for summary stats\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# mean average daily rate for all bookings\nhotels %>%\n  summarise(mean_adr = mean(adr)) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_adr\n     <dbl>\n1     102.\n```\n:::\n:::\n\n--\n\n.pull-left-wide[\n.tip[\n`summarise()` changes the data frame entirely, it collapses rows down to a single \nsummary statistic, and removes all columns that are irrelevant to the calculation.\n]\n]\n\n---\n\n\n.tip[\n`summarise()` also lets you get away with being sloppy and not naming your new \ncolumn, but that's not recommended!\n]\n\n.pull-left[\n❌\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  summarise(mean(adr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  `mean(adr)`\n        <dbl>\n1        102.\n```\n:::\n:::\n\n]\n.pull-right[\n✅\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  summarise(mean_adr = mean(adr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_adr\n     <dbl>\n1     102.\n```\n:::\n:::\n\n]\n\n\n---\n\n## `group_by` for grouped operations\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# mean average daily rate for all booking at city and resort hotels\nhotels %>%\n  group_by(hotel) %>% #<<\n  summarise(mean_adr = mean(adr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hotel        mean_adr\n  <chr>           <dbl>\n1 City Hotel      105. \n2 Resort Hotel     95.0\n```\n:::\n:::\n\n---\n\n\n## Calculating frequencies\n\nThe following two give the same result, so `count` is simply short for `group_by` then determine frequencies \n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  group_by(hotel) %>%\n  summarise(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hotel            n\n  <chr>        <int>\n1 City Hotel   79330\n2 Resort Hotel 40060\n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  count(hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hotel            n\n  <chr>        <int>\n1 City Hotel   79330\n2 Resort Hotel 40060\n```\n:::\n:::\n\n]\n\n\n---\n\n## Multiple summary statistics\n\n`summarise` can be used for multiple summary statistics as well\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  summarise(\n    min_adr = min(adr),\n    mean_adr = mean(adr),\n    median_adr = median(adr),\n    max_adr = max(adr)\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  min_adr mean_adr median_adr max_adr\n    <dbl>    <dbl>      <dbl>   <dbl>\n1   -6.38     102.       94.6    5400\n```\n:::\n:::\n\n---\n\n\n.your-turn[\n### Your turn!\n\nTime to actually play around with the Hotels dataset!\n\n- Go to RStudio Cloud and start `AE 04 - Hotels + Data wrangling`.\n- Open the R Markdown document and complete Exercises 7 and 8.\n]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/font-awesome/css/all.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/font-awesome/css/v4-shims.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/panelset/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/panelset/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}