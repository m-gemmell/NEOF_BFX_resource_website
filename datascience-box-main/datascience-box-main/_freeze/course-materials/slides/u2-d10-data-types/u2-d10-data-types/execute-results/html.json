{
  "hash": "b858afb2997469b56f3a7a3f7c7915e6",
  "result": {
    "markdown": "---\ntitle: \"Data types\"\nsubtitle: \"<br><br> Data Science in a Box\"\nauthor: \"[datasciencebox.org](https://datasciencebox.org/)\"\noutput:\n  xaringan::moon_reader:\n    css: [\"../xaringan-themer.css\", \"../slides.css\"]\n    lib_dir: libs\n    nature:\n      ratio: \"16:9\"\n      highlightLines: true\n      highlightStyle: solarized-light\n      countIncrementalSlides: false\n---\n\n\n\n\nlayout: true\n  \n<div class=\"my-footer\">\n<span>\n<a href=\"https://datasciencebox.org\" target=\"_blank\">datasciencebox.org</a>\n</span>\n</div> \n\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nclass: middle\n\n# Why should you care about data types?\n\n\n---\n\n## Example: Cat lovers\n\nA survey asked respondents their name and number of cats. The instructions said to enter the number of cats as a numerical value.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncat_lovers <- read_csv(\"data/cat-lovers.csv\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 × 3\n  name           number_of_cats handedness\n  <chr>          <chr>          <chr>     \n1 Bernice Warren 0              left      \n2 Woodrow Stone  0              left      \n3 Willie Bass    1              left      \n4 Tyrone Estrada 3              left      \n5 Alex Daniels   3              left      \n6 Jane Bates     2              left      \n# … with 54 more rows\n```\n:::\n:::\n\n---\n\n\n## Oh why won't you work?!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncat_lovers %>%\n  summarise(mean_cats = mean(number_of_cats))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in mean.default(number_of_cats): argument is not numeric\nor logical: returning NA\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_cats\n      <dbl>\n1        NA\n```\n:::\n:::\n\n---\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n::: {.cell layout-align=\"center\" caption='Help for mean'}\n::: {.cell-output-display}\n![](img/mean-help.png){fig-align='center' width=75%}\n:::\n:::\n\n---\n\n\n## Oh why won't you still work??!!\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncat_lovers %>%\n  summarise(mean_cats = mean(number_of_cats, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in mean.default(number_of_cats, na.rm = TRUE): argument\nis not numeric or logical: returning NA\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_cats\n      <dbl>\n1        NA\n```\n:::\n:::\n\n---\n\n## Take a breath and look at your data\n\n.question[\nWhat is the type of the `number_of_cats` variable?\n]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(cat_lovers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 60\nColumns: 3\n$ name           <chr> \"Bernice Warren\", \"Woodrow Stone\", \"Will…\n$ number_of_cats <chr> \"0\", \"0\", \"1\", \"3\", \"3\", \"2\", \"1\", \"1\", …\n$ handedness     <chr> \"left\", \"left\", \"left\", \"left\", \"left\", …\n```\n:::\n:::\n\n---\n\n\n## Let's take another look\n\n.small[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-1b4ff99564eb6e8884a5\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-1b4ff99564eb6e8884a5\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\"],[\"Bernice Warren\",\"Woodrow Stone\",\"Willie Bass\",\"Tyrone Estrada\",\"Alex Daniels\",\"Jane Bates\",\"Latoya Simpson\",\"Darin Woods\",\"Agnes Cobb\",\"Tabitha Grant\",\"Perry Cross\",\"Wanda Silva\",\"Alicia Sims\",\"Emily Logan\",\"Woodrow Elliott\",\"Brent Copeland\",\"Pedro Carlson\",\"Patsy Luna\",\"Brett Robbins\",\"Oliver George\",\"Calvin Perry\",\"Lora Gutierrez\",\"Charlotte Sparks\",\"Earl Mack\",\"Leslie Wade\",\"Santiago Barker\",\"Jose Bell\",\"Lynda Smith\",\"Bradford Marshall\",\"Irving Miller\",\"Caroline Simpson\",\"Frances Welch\",\"Melba Jenkins\",\"Veronica Morales\",\"Juanita Cunningham\",\"Maurice Howard\",\"Teri Pierce\",\"Phil Franklin\",\"Jan Zimmerman\",\"Leslie Price\",\"Bessie Patterson\",\"Ethel Wolfe\",\"Naomi Wright\",\"Sadie Frank\",\"Lonnie Cannon\",\"Tony Garcia\",\"Darla Newton\",\"Ginger Clark\",\"Lionel Campbell\",\"Florence Klein\",\"Harriet Leonard\",\"Terrence Harrington\",\"Travis Garner\",\"Doug Bass\",\"Pat Norris\",\"Dawn Young\",\"Shari Alvarez\",\"Tamara Robinson\",\"Megan Morgan\",\"Kara Obrien\"],[\"0\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"1\",\"0\",\"0\",\"0\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"0\",\"0\",\"4\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"3\",\"3\",\"2\",\"1\",\"1.5 - honestly I think one of my cats is half human\",\"0\",\"0\",\"1\",\"0\",\"1\",\"three\",\"1\",\"1\",\"1\",\"0\",\"0\",\"2\"],[\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"left\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"right\",\"ambidextrous\",\"ambidextrous\",\"ambidextrous\",\"ambidextrous\",\"ambidextrous\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>name<\\/th>\\n      <th>number_of_cats<\\/th>\\n      <th>handedness<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n]\n\n\n---\n\n## Sometimes you might need to babysit your respondents\n\n.midi[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncat_lovers %>%\n  mutate(number_of_cats = case_when(\n    name == \"Ginger Clark\" ~ 2,\n    name == \"Doug Bass\"    ~ 3,\n    TRUE                   ~ as.numeric(number_of_cats)\n    )) %>%\n  summarise(mean_cats = mean(number_of_cats))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in eval_tidy(pair$rhs, env = default_env): NAs introduced\nby coercion\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_cats\n      <dbl>\n1     0.833\n```\n:::\n:::\n]\n\n---\n\n\n## Always you need to respect data types\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncat_lovers %>%\n  mutate(\n    number_of_cats = case_when(\n      name == \"Ginger Clark\" ~ \"2\",\n      name == \"Doug Bass\"    ~ \"3\",\n      TRUE                   ~ number_of_cats\n      ),\n    number_of_cats = as.numeric(number_of_cats)\n    ) %>%\n  summarise(mean_cats = mean(number_of_cats))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  mean_cats\n      <dbl>\n1     0.833\n```\n:::\n:::\n\n---\n\n## Now that we know what we're doing...\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncat_lovers <- cat_lovers %>% #<<\n  mutate(\n    number_of_cats = case_when(\n      name == \"Ginger Clark\" ~ \"2\",\n      name == \"Doug Bass\"    ~ \"3\",\n      TRUE                   ~ number_of_cats\n      ),\n    number_of_cats = as.numeric(number_of_cats)\n    )\n```\n:::\n\n---\n\n\n## Moral of the story\n\n- If your data does not behave how you expect it to, type coercion upon reading in the data might be the reason.\n- Go in and investigate your data, apply the fix, *save your data*, live happily ever after.\n\n\n---\n\nclass: middle\n\n.hand[.light-blue[now that we have a good motivation for]]  \n.hand[.light-blue[learning about data types in R]]\n\n<br>\n\n.large[\n.hand[.light-blue[let's learn about data types in R!]]\n]\n\n---\n\n\nclass: middle\n\n# Data types\n\n\n---\n\n## Data types in R\n\n- **logical**\n- **double**\n- **integer**\n- **character**\n- and some more, but we won't be focusing on those\n\n---\n\n\n## Logical & character\n\n.pull-left[\n**logical** - boolean values `TRUE` and `FALSE`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n]\n.pull-right[\n**character** - character strings\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(\"hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n]\n\n\n---\n\n## Double & integer\n\n.pull-left[\n**double** - floating point numerical values (default numerical type)\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(1.335)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n]\n.pull-right[\n**integer** - integer numerical values (indicated with an `L`)\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(7L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n]\n\n---\n\n\n## Concatenation\n\nVectors can be constructed using the `c()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nc(\"Hello\", \"World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello\"  \"World!\"\n```\n:::\n\n```{.r .cell-code}\nc(c(\"hi\", \"hello\"), c(\"bye\", \"jello\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hi\"    \"hello\" \"bye\"   \"jello\"\n```\n:::\n:::\n\n---\n\n## Converting between types\n\n.hand[with intention...]\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- 1:3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n:::\n]\n--\n.pull-right[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ny <- as.character(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\" \"2\" \"3\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n]\n\n---\n\n\n## Converting between types\n\n.hand[with intention...]\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n]\n--\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ny <- as.numeric(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 0\n```\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n]\n\n\n---\n\n## Converting between types\n\n.hand[without intention...]\n\nR will happily convert between various types without complaint when different types of data are concatenated in a vector, and that's not always a great thing!\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(1, \"Hello\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1\"     \"Hello\"\n```\n:::\n\n```{.r .cell-code}\nc(FALSE, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 3\n```\n:::\n:::\n]\n--\n.pull-right[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nc(1.2, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.2 3.0\n```\n:::\n\n```{.r .cell-code}\nc(2L, \"two\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2\"   \"two\"\n```\n:::\n:::\n]\n\n---\n\n\n## Explicit vs. implicit coercion\n\nLet's give formal names to what we've seen so far:\n\n--\n- **Explicit coercion** is when you call a function like `as.logical()`, `as.numeric()`, `as.integer()`, `as.double()`, or `as.character()`\n\n\n--\n- **Implicit coercion** happens when you use a vector in a specific context that expects a certain type of vector\n\n\n---\n\n.midi[\n.your-turn[\n### .hand[Your turn!]\n\n- RStudio Cloud > `AE 05 - Hotels + Data types` > open `type-coercion.Rmd` and knit.\n- What is the type of the given vectors? First, guess. Then, try it out in R. \nIf your guess was correct, great! If not, discuss why they have that type.\n]\n]\n\n--\n\n.small[\n**Example:** Suppose we want to know the type of `c(1, \"a\")`. First, I'd look at: \n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n]\n.pull-right[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(\"a\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n]\n\nand make a guess based on these. Then finally I'd check:\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(c(1, \"a\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n]\n]\n\n---\n\n\nclass: middle\n\n# Special values\n\n\n---\n\n## Special values\n\n- `NA`: Not available\n- `NaN`: Not a number\n- `Inf`: Positive infinity\n- `-Inf`: Negative infinity\n\n--\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npi / 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf\n```\n:::\n\n```{.r .cell-code}\n0 / 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NaN\n```\n:::\n:::\n]\n.pull-right[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1/0 - 1/0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NaN\n```\n:::\n\n```{.r .cell-code}\n1/0 + 1/0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Inf\n```\n:::\n:::\n]\n\n---\n\n\n## `NA`s are special ❄️s\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- c(1, 2, 3, 4, NA)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmean(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmean(x, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.5\n```\n:::\n\n```{.r .cell-code}\nsummary(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.00    1.75    2.50    2.50    3.25    4.00       1 \n```\n:::\n:::\n\n---\n\n## `NA`s are logical\n\nR uses `NA` to represent missing values in its data structures.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntypeof(NA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n:::\n\n---\n\n\n## Mental model for `NA`s\n\n- Unlike `NaN`, `NA`s are genuinely unknown values\n- But that doesn't mean they can't function in a logical way\n- Let's think about why `NA`s are logical...\n\n--\n\n.question[\nWhy do the following give different answers?\n]\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# TRUE or NA\nTRUE | NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# FALSE or NA\nFALSE | NA\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n]\n\n$\\rightarrow$ See next slide for answers...\n\n\n---\n\n- `NA` is unknown, so it could be `TRUE` or `FALSE`\n\n.pull-left[\n.midi[\n- `TRUE | NA`\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nTRUE | TRUE  # if NA was TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nTRUE | FALSE # if NA was FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n]\n]\n.pull-right[\n.midi[\n- `FALSE | NA`\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nFALSE | TRUE  # if NA was TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nFALSE | FALSE # if NA was FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n]\n]\n\n- Doesn't make sense for mathematical operations \n- Makes sense in the context of missing data\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/font-awesome/css/all.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/font-awesome/css/v4-shims.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/panelset/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/panelset/panelset.js\"></script>\n<script src=\"../../../site_libs/htmlwidgets/htmlwidgets.js\"></script>\n<link href=\"../../../site_libs/datatables-css/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/datatables-binding/datatables.js\"></script>\n<script src=\"../../../site_libs/jquery/jquery-3.6.0.min.js\"></script>\n<link href=\"../../../site_libs/dt-core/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/dt-core/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/dt-core/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../../site_libs/crosstalk/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/crosstalk/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}