{
  "hash": "f183524984e264ccd95188110f36ce85",
  "result": {
    "markdown": "---\ntitle: \"Prediction and overfitting\"\nsubtitle: \"<br><br> Data Science in a Box\"\nauthor: \"[datasciencebox.org](https://datasciencebox.org/)\"\noutput:\n  xaringan::moon_reader:\n    css: [\"../xaringan-themer.css\", \"../slides.css\"]\n    lib_dir: libs\n    anchor_sections: FALSE\n    nature:\n      ratio: \"16:9\"\n      highlightLines: true\n      highlightStyle: solarized-light\n      countIncrementalSlides: false\n---\n\n\n\n\nlayout: true\n  \n<div class=\"my-footer\">\n<span>\n<a href=\"https://datasciencebox.org\" target=\"_blank\">datasciencebox.org</a>\n</span>\n</div> \n\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nclass: middle\n\n# Prediction\n\n\n---\n\n## Goal: Building a spam filter\n\n- Data: Set of emails and we know if each email is spam/not and other features \n- Use logistic regression to predict the probability that an incoming email is spam\n- Use model selection to pick the model with the best predictive performance\n\n--\n- Building a model to predict the probability that an email is spam is only half of the battle! We also need a decision rule about which emails get flagged as spam (e.g. what probability should we use as out cutoff?)\n\n--\n- A simple approach: choose a single threshold probability and any email that exceeds that probability is flagged as spam\n\n---\n\n\n## A multiple regression approach\n\n.panelset[\n.panel[.panel-name[Output]\n.small[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 22 × 5\n   term         estimate std.error statistic  p.value\n   <chr>           <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)  -9.09e+1   9.80e+3  -0.00928 9.93e- 1\n 2 to_multiple1 -2.68e+0   3.27e-1  -8.21    2.25e-16\n 3 from1        -2.19e+1   9.80e+3  -0.00224 9.98e- 1\n 4 cc            1.88e-2   2.20e-2   0.855   3.93e- 1\n 5 sent_email1  -2.07e+1   3.87e+2  -0.0536  9.57e- 1\n 6 time          8.48e-8   2.85e-8   2.98    2.92e- 3\n 7 image        -1.78e+0   5.95e-1  -3.00    2.73e- 3\n 8 attach        7.35e-1   1.44e-1   5.09    3.61e- 7\n 9 dollar       -6.85e-2   2.64e-2  -2.59    9.64e- 3\n10 winneryes     2.07e+0   3.65e-1   5.67    1.41e- 8\n11 inherit       3.15e-1   1.56e-1   2.02    4.32e- 2\n12 viagra        2.84e+0   2.22e+3   0.00128 9.99e- 1\n13 password     -8.54e-1   2.97e-1  -2.88    4.03e- 3\n14 num_char      5.06e-2   2.38e-2   2.13    3.35e- 2\n15 line_breaks  -5.49e-3   1.35e-3  -4.06    4.91e- 5\n16 format1      -6.14e-1   1.49e-1  -4.14    3.53e- 5\n17 re_subj1     -1.64e+0   3.86e-1  -4.25    2.16e- 5\n18 exclaim_subj  1.42e-1   2.43e-1   0.585   5.58e- 1\n19 urgent_subj1  3.88e+0   1.32e+0   2.95    3.18e- 3\n20 exclaim_mess  1.08e-2   1.81e-3   5.98    2.23e- 9\n21 numbersmall  -1.19e+0   1.54e-1  -7.74    9.62e-15\n22 numberbig    -2.95e-1   2.20e-1  -1.34    1.79e- 1\n```\n:::\n:::\n\n]\n]\n.panel[.panel-name[Code]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlogistic_reg() %>%\n  set_engine(\"glm\") %>%\n  fit(spam ~ ., data = email, family = \"binomial\") %>%\n  tidy() %>%\n  print(n = 22)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n:::\n:::\n\n]\n]\n\n\n---\n\n## Prediction\n\n- The mechanics of prediction is **easy**:\n  - Plug in values of predictors to the model equation\n  - Calculate the predicted value of the response variable, $\\hat{y}$\n\n--\n- Getting it right is **hard**!\n  - There is no guarantee the model estimates you have are correct\n  - Or that your model will perform as well with new data as it did with your sample data\n\n---\n\n\n## Underfitting and overfitting\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](u4-d07-prediction-overfitting_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=70%}\n:::\n:::\n\n---\n\n## Spending our data\n\n- Several steps to create a useful model: parameter estimation, model selection, performance assessment, etc.\n\n- Doing all of this on the entire data we have available can lead to **overfitting**\n\n- Allocate specific subsets of data for different tasks, as opposed to allocating the largest possible amount to the model parameter estimation only (which is what we've done so far)\n\n---\n\n\nclass: middle\n\n# Splitting data\n\n\n---\n\n## Splitting data\n\n- **Training set:**\n  - Sandbox for model building \n  - Spend most of your time using the training set to develop the model\n  - Majority of the data (usually 80%)\n  \n- **Testing set:**\n  - Held in reserve to determine efficacy of one or two chosen models\n  - Critical to look at it once, otherwise it becomes part of the modeling process\n  - Remainder of the data (usually 20%)\n  \n---\n\n\n## Performing the split\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Fix random numbers by setting the seed \n# Enables analysis to be reproducible when random numbers are used \nset.seed(1116)\n\n# Put 80% of the data into the training set \nemail_split <- initial_split(email, prop = 0.80)\n\n# Create data frames for the two sets:\ntrain_data <- training(email_split)\ntest_data  <- testing(email_split)\n```\n:::\n\n---\n\n## Peek at the split\n\n.small[\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(train_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,136\nColumns: 21\n$ spam         <fct> 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, …\n$ to_multiple  <fct> 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, …\n$ from         <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ cc           <int> 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35,…\n$ sent_email   <fct> 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ time         <dttm> 2012-01-25 17:46:55, 2012-01-03 00:28:28,…\n$ image        <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ attach       <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ dollar       <dbl> 10, 0, 0, 0, 0, 0, 13, 0, 0, 0, 2, 0, 0, 0…\n$ winner       <fct> no, no, no, no, no, no, no, yes, no, no, n…\n$ inherit      <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ viagra       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ password     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ num_char     <dbl> 23.308, 1.162, 4.732, 42.238, 1.228, 25.59…\n$ line_breaks  <int> 477, 2, 127, 712, 30, 674, 367, 226, 98, 6…\n$ format       <fct> 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, …\n$ re_subj      <fct> 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, …\n$ exclaim_subj <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, …\n$ urgent_subj  <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ exclaim_mess <dbl> 12, 0, 2, 2, 2, 31, 2, 0, 0, 1, 0, 1, 2, 0…\n$ number       <fct> small, none, big, big, small, small, small…\n```\n:::\n:::\n]\n.pull-right[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 785\nColumns: 21\n$ spam         <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ to_multiple  <fct> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, …\n$ from         <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ cc           <int> 0, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ sent_email   <fct> 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ time         <dttm> 2012-01-01 12:55:06, 2012-01-01 14:38:32,…\n$ image        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ attach       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, …\n$ dollar       <dbl> 0, 0, 5, 0, 0, 0, 0, 5, 4, 0, 0, 0, 21, 0,…\n$ winner       <fct> no, no, no, no, no, no, no, no, no, no, no…\n$ inherit      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, …\n$ viagra       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ password     <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, …\n$ num_char     <dbl> 4.837, 15.075, 18.037, 45.842, 11.438, 1.4…\n$ line_breaks  <int> 193, 354, 345, 881, 125, 24, 296, 13, 192,…\n$ format       <fct> 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, …\n$ re_subj      <fct> 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, …\n$ exclaim_subj <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ urgent_subj  <fct> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ exclaim_mess <dbl> 1, 10, 20, 5, 2, 0, 0, 0, 6, 0, 0, 1, 3, 0…\n$ number       <fct> big, small, small, big, small, none, small…\n```\n:::\n:::\n]\n]\n\n---\n\n\nclass: middle\n\n# Modeling workflow\n\n\n---\n\n## Fit a model to the training dataset\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_fit <- logistic_reg() %>%\n  set_engine(\"glm\") %>%\n  fit(spam ~ ., data = train_data, family = \"binomial\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n:::\n:::\n\n---\n\n\n## Categorical predictors\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](u4-d07-prediction-overfitting_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=75%}\n:::\n:::\n\n---\n\n## `from` and `sent_email`\n\n.pull-left[\n- `from`: Whether the message was listed as from anyone (this is usually set by default for regular outgoing email)\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntrain_data %>%\n  count(spam, from)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  spam  from      n\n  <fct> <fct> <int>\n1 0     1      2837\n2 1     0         3\n3 1     1       296\n```\n:::\n:::\n]\n.pull-right[\n- `sent_email`: Indicator for whether the sender had been sent an email in the last 30 days\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntrain_data %>%\n  count(spam, sent_email)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  spam  sent_email     n\n  <fct> <fct>      <int>\n1 0     0           1972\n2 0     1            865\n3 1     0            299\n```\n:::\n:::\n]\n\n---\n\n\n## Numerical predictors\n\n.small[\n\n::: {.cell layout-align=\"center\" highlight.output='[14,15]'}\n::: {.cell-output .cell-output-stdout}\n```\n\n── Variable type: numeric ──────────────────────────────────────────────────────────────────────────\n   skim_variable spam n_missing complete_rate      mean       sd    p0    p25     p50    p75  p100\n 1 cc            0            0             1   0.393     2.62   0      0       0       0      68 \n 2 cc            1            0             1   0.388     3.25   0      0       0       0      50 \n 3 image         0            0             1   0.0536    0.503  0      0       0       0      20 \n 4 image         1            0             1   0.00334   0.0578 0      0       0       0       1 \n 5 attach        0            0             1   0.124     0.775  0      0       0       0      21 \n 6 attach        1            0             1   0.227     0.620  0      0       0       0       2 \n 7 dollar        0            0             1   1.56      5.33   0      0       0       0      64 \n 8 dollar        1            0             1   0.779     3.01   0      0       0       0      36 \n 9 inherit       0            0             1   0.0352    0.216  0      0       0       0       6 \n10 inherit       1            0             1   0.0702    0.554  0      0       0       0       9 \n11 viagra        0            0             1   0         0      0      0       0       0       0 \n12 viagra        1            0             1   0.0268    0.463  0      0       0       0       8 \n13 password      0            0             1   0.112     0.938  0      0       0       0      22 \n14 password      1            0             1   0.0201    0.182  0      0       0       0       2 \n15 num_char      0            0             1  11.4      14.9    0.003  1.97    6.83   15.7   190.\n16 num_char      1            0             1   5.63     15.7    0.001  0.468   0.999   3.55  174.\n17 line_breaks   0            0             1 247.      326.     2     42     138     318    4022 \n18 line_breaks   1            0             1 108.      321.     1     14      23      66.5  3729 \n19 exclaim_subj  0            0             1   0.0783    0.269  0      0       0       0       1 \n20 exclaim_subj  1            0             1   0.0769    0.267  0      0       0       0       1 \n21 exclaim_mess  0            0             1   6.68     50.2    0      0       1       5    1236 \n22 exclaim_mess  1            0             1   8.75     88.4    0      0       0       1    1209 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$numeric\n\n── Variable type: numeric ──────────────────────────────────────────────────────────────────────────\n  skim_variable spam n_missing complete_rate    mean     sd p0\n1 cc            0            0             1 0.393   2.62    0\n2 cc            1            0             1 0.388   3.25    0\n3 image         0            0             1 0.0536  0.503   0\n4 image         1            0             1 0.00334 0.0578  0\n5 attach        0            0             1 0.124   0.775   0\n6 attach        1            0             1 0.227   0.620   0\n# … with 16 more rows, and 4 more variables: p25 <dbl>,\n#   p50 <dbl>, p75 <dbl>, p100 <dbl>\n```\n:::\n:::\n\n]\n\n\n---\n\n## Fit a model to the training dataset\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_fit <- logistic_reg() %>%\n  set_engine(\"glm\") %>%\n  fit(spam ~ . - from - sent_email - viagra, data = train_data, family = \"binomial\") #<<\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n```\n:::\n:::\n\n.small[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nparsnip model object\n\n\nCall:  stats::glm(formula = spam ~ . - from - sent_email - viagra, family = stats::binomial, \n    data = data)\n\nCoefficients:\n (Intercept)  to_multiple1            cc          time         image        attach        dollar  \n  -9.867e+01    -2.505e+00     1.944e-02     7.396e-08    -2.854e+00     5.070e-01    -6.440e-02  \n   winneryes       inherit      password      num_char   line_breaks       format1      re_subj1  \n   2.170e+00     4.499e-01    -7.065e-01     5.870e-02    -5.420e-03    -9.017e-01    -2.995e+00  \nexclaim_subj  urgent_subj1  exclaim_mess   numbersmall     numberbig  \n   1.002e-01     3.572e+00     1.009e-02    -8.518e-01    -1.329e-01  \n\nDegrees of Freedom: 3135 Total (i.e. Null);  3117 Residual\nNull Deviance:\t    1974 \nResidual Deviance: 1447 \tAIC: 1485\n```\n:::\n:::\n]\n\n---\n\n\n## Predict outcome on the testing dataset\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredict(email_fit, test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 785 × 1\n  .pred_class\n  <fct>      \n1 0          \n2 0          \n3 0          \n4 0          \n5 0          \n6 0          \n# … with 779 more rows\n```\n:::\n:::\n\n---\n\n## Predict probabilities on the testing dataset\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred <- predict(email_fit, test_data, type = \"prob\") %>%\n  bind_cols(test_data %>% select(spam, time))\n\nemail_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 785 × 4\n  .pred_0 .pred_1 spam  time               \n    <dbl>   <dbl> <fct> <dttm>             \n1   0.993 0.00709 0     2012-01-01 12:55:06\n2   0.998 0.00181 0     2012-01-01 14:38:32\n3   0.981 0.0191  0     2012-01-02 00:42:16\n4   0.999 0.00124 0     2012-01-02 10:12:51\n5   0.988 0.0121  0     2012-01-02 11:45:36\n6   0.830 0.170   0     2012-01-02 16:55:03\n# … with 779 more rows\n```\n:::\n:::\n\n---\n\n\n## A closer look at predictions\n\n.pull-left-wide[\n\n::: {.cell layout-align=\"center\" highlight.output='[6,10]'}\n\n```{.r .cell-code}\nemail_pred %>%\n  arrange(desc(.pred_1)) %>%\n  print(n = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 785 × 4\n   .pred_0 .pred_1 spam  time               \n     <dbl>   <dbl> <fct> <dttm>             \n 1  0.0972   0.903 1     2012-02-13 07:15:00\n 2  0.167    0.833 0     2012-01-27 15:05:06\n 3  0.175    0.825 1     2012-03-01 00:40:27\n 4  0.267    0.733 1     2012-03-17 06:13:27\n 5  0.317    0.683 1     2012-03-21 08:33:12\n 6  0.374    0.626 1     2012-02-08 03:00:05\n 7  0.386    0.614 0     2012-01-30 09:20:29\n 8  0.403    0.597 1     2012-01-07 11:11:49\n 9  0.462    0.538 1     2012-03-06 06:46:20\n10  0.463    0.537 0     2012-02-17 17:54:16\n# … with 775 more rows\n```\n:::\n:::\n\n]\n\n\n---\n\n## Evaluate the performance\n\n**Receiver operating characteristic (ROC) curve**<sup>+</sup> which plot true positive rate vs. false positive rate (1 - specificity)\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_curve(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  ) %>%\n  autoplot()\n```\n:::\n]\n.pull-right[\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](u4-d07-prediction-overfitting_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=100%}\n:::\n:::\n]\n\n.footnote[\n.small[\n<sup>+</sup>Originally developed for operators of military radar receivers, hence the name.\n]\n]\n\n---\n\n\n## Evaluate the performance\n\nFind the area under the curve:\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nemail_pred %>%\n  roc_auc(\n    truth = spam,\n    .pred_1,\n    event_level = \"second\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.857\n```\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](u4-d07-prediction-overfitting_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=100%}\n:::\n:::\n\n]\n",
    "supporting": [
      "u4-d07-prediction-overfitting_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/font-awesome/css/all.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/font-awesome/css/v4-shims.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/panelset/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/panelset/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}