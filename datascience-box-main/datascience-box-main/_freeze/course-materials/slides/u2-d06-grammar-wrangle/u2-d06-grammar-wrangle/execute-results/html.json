{
  "hash": "65604c496a8d543797f388fe66b6b4a2",
  "result": {
    "markdown": "---\ntitle: \"Grammar of data wrangling\"\nsubtitle: \"<br><br> Data Science in a Box\"\nauthor: \"[datasciencebox.org](https://datasciencebox.org/)\"\noutput:\n  xaringan::moon_reader:\n    css: [\"../xaringan-themer.css\", \"../slides.css\"]\n    lib_dir: libs\n    nature:\n      ratio: \"16:9\"\n      highlightLines: true\n      highlightStyle: solarized-light\n      countIncrementalSlides: false\n---\n\n\n\n\nlayout: true\n  \n<div class=\"my-footer\">\n<span>\n<a href=\"https://datasciencebox.org\" target=\"_blank\">datasciencebox.org</a>\n</span>\n</div> \n\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nclass: middle\n\n# Grammar of data wrangling\n\n\n---\n\n## A grammar of data wrangling...\n\n... based on the concepts of functions as verbs that manipulate data frames\n\n.pull-left[\n::: {.cell layout-align=\"center\" caption='dplyr is part of the tidyverse'}\n::: {.cell-output-display}\n![](img/dplyr-part-of-tidyverse.png){fig-align='center' width=70%}\n:::\n:::\n]\n.pull-right[\n.midi[\n- `select`: pick columns by name\n- `arrange`: reorder rows\n- `slice`: pick rows using index(es)\n- `filter`: pick rows matching criteria\n- `distinct`: filter for unique rows\n- `mutate`: add new variables\n- `summarise`: reduce variables to values\n- `group_by`: for grouped operations\n- ... (many more)\n]\n]\n\n---\n\n\n## Rules of **dplyr** functions\n\n- First argument is *always* a data frame\n- Subsequent arguments say what to do with that data frame\n- Always return a data frame\n- Don't modify in place\n\n\n---\n\n## Data: Hotel bookings\n\n- Data from two hotels: one resort and one city hotel\n- Observations: Each row represents a hotel booking\n- Goal for original data collection: Development of prediction models to classify a hotel booking's likelihood to be cancelled ([Antonia et al., 2019](https://www.sciencedirect.com/science/article/pii/S2352340918315191#bib5))\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels <- read_csv(\"data/hotels.csv\")\n```\n:::\n\n.footnote[\nSource: [TidyTuesday](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md)\n]\n\n---\n\n\n## First look: Variables\n\n\n::: {.cell layout-align=\"center\" output.lines='18'}\n\n```{.r .cell-code}\nnames(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"hotel\"                         \n [2] \"is_canceled\"                   \n [3] \"lead_time\"                     \n [4] \"arrival_date_year\"             \n [5] \"arrival_date_month\"            \n [6] \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"     \n [8] \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"          \n[10] \"adults\"                        \n[11] \"children\"                      \n[12] \"babies\"                        \n[13] \"meal\"                          \n[14] \"country\"                       \n[15] \"market_segment\"                \n[16] \"distribution_channel\"          \n[17] \"is_repeated_guest\"             \n[18] \"previous_cancellations\"        \n...\n```\n:::\n:::\n\n---\n\n## Second look: Overview\n\n::: {.cell layout-align=\"center\" output.lines='18'}\n\n```{.r .cell-code}\nglimpse(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 119,390\nColumns: 32\n$ hotel                          <chr> \"Resort Hotel\", \"Resort …\n$ is_canceled                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ lead_time                      <dbl> 342, 737, 7, 13, 14, 14,…\n$ arrival_date_year              <dbl> 2015, 2015, 2015, 2015, …\n$ arrival_date_month             <chr> \"July\", \"July\", \"July\", …\n$ arrival_date_week_number       <dbl> 27, 27, 27, 27, 27, 27, …\n$ arrival_date_day_of_month      <dbl> 1, 1, 1, 1, 1, 1, 1, 1, …\n$ stays_in_weekend_nights        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ stays_in_week_nights           <dbl> 0, 0, 1, 1, 2, 2, 2, 2, …\n$ adults                         <dbl> 2, 2, 1, 1, 2, 2, 2, 2, …\n$ children                       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ babies                         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ meal                           <chr> \"BB\", \"BB\", \"BB\", \"BB\", …\n$ country                        <chr> \"PRT\", \"PRT\", \"GBR\", \"GB…\n$ market_segment                 <chr> \"Direct\", \"Direct\", \"Dir…\n$ distribution_channel           <chr> \"Direct\", \"Direct\", \"Dir…\n...\n```\n:::\n:::\n\n---\n\n\n## Select a single column\n\nView only `lead_time` (number of days between booking and arrival date):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(hotels, lead_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 1\n  lead_time\n      <dbl>\n1       342\n2       737\n3         7\n4        13\n5        14\n6        14\n# … with 119,384 more rows\n```\n:::\n:::\n\n---\n\n## Select a single column\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect( #<<\n  hotels, \n  lead_time\n  )\n```\n:::\n]\n.pull-right[\n- Start with the function (a verb): `select()`\n]\n\n---\n\n\n## Select a single column\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect( \n  hotels, #<<\n  lead_time\n  )\n```\n:::\n\n]\n.pull-right[\n- Start with the function (a verb): `select()`\n- First argument: data frame we're working with , `hotels`\n]\n\n\n---\n\n## Select a single column\n\n.pull-left[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect( \n  hotels, \n  lead_time #<<\n  )\n```\n:::\n]\n.pull-right[\n- Start with the function (a verb): `select()`\n- First argument: data frame we're working with , `hotels`\n- Second argument: variable we want to select, `lead_time`\n]\n\n---\n\n\n## Select a single column\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect( \n  hotels, \n  lead_time\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 1\n  lead_time\n      <dbl>\n1       342\n2       737\n3         7\n4        13\n5        14\n6        14\n# … with 119,384 more rows\n```\n:::\n:::\n\n]\n.pull-right[\n- Start with the function (a verb): `select()`\n- First argument: data frame we're working with , `hotels`\n- Second argument: variable we want to select, `lead_time`\n- Result: data frame with 119390 rows and 1 column\n]\n\n\n---\n\n.tip[\ndplyr functions always expect a data frame and always yield a data frame.\n]\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(hotels, lead_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 1\n  lead_time\n      <dbl>\n1       342\n2       737\n3         7\n4        13\n5        14\n6        14\n# … with 119,384 more rows\n```\n:::\n:::\n\n---\n\n\n## Select multiple columns\n\n\nView only the `hotel` type and `lead_time`:\n\n--\n\n.pull-left[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(hotels, hotel, lead_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 2\n  hotel        lead_time\n  <chr>            <dbl>\n1 Resort Hotel       342\n2 Resort Hotel       737\n3 Resort Hotel         7\n4 Resort Hotel        13\n5 Resort Hotel        14\n6 Resort Hotel        14\n# … with 119,384 more rows\n```\n:::\n:::\n\n]\n--\n.pull-right[\n.question[\nWhat if we wanted to select these columns, and then arrange the data in descending order of lead time?\n]\n]\n\n\n---\n\n## Data wrangling, step-by-step\n\n.pull-left[\nSelect:\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(hotel, lead_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 2\n  hotel        lead_time\n  <chr>            <dbl>\n1 Resort Hotel       342\n2 Resort Hotel       737\n3 Resort Hotel         7\n4 Resort Hotel        13\n5 Resort Hotel        14\n6 Resort Hotel        14\n# … with 119,384 more rows\n```\n:::\n:::\n]\n\n--\n.pull-right[\nSelect, then arrange:\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(hotel, lead_time) %>%\n  arrange(desc(lead_time))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 2\n  hotel        lead_time\n  <chr>            <dbl>\n1 Resort Hotel       737\n2 Resort Hotel       709\n3 City Hotel         629\n4 City Hotel         629\n5 City Hotel         629\n6 City Hotel         629\n# … with 119,384 more rows\n```\n:::\n:::\n]\n\n---\n\n\nclass: middle\n\n# Pipes\n\n\n---\n\n## What is a pipe?\n\nIn programming, a pipe is a technique for passing information from one process to another.\n\n--\n\n.pull-left[\n- Start with the data frame `hotels`, and pass it to the `select()` function,\n]\n.pull-right[\n.small[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>% #<<\n  select(hotel, lead_time) %>%\n  arrange(desc(lead_time))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 2\n  hotel        lead_time\n  <chr>            <dbl>\n1 Resort Hotel       737\n2 Resort Hotel       709\n3 City Hotel         629\n4 City Hotel         629\n5 City Hotel         629\n6 City Hotel         629\n# … with 119,384 more rows\n```\n:::\n:::\n]\n]\n\n---\n\n\n## What is a pipe?\n\nIn programming, a pipe is a technique for passing information from one process to another.\n\n.pull-left[\n- Start with the data frame `hotels`, and pass it to the `select()` function,\n- then we select the variables `hotel` and `lead_time`,\n]\n.pull-right[\n.small[\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(hotel, lead_time) %>% #<<\n  arrange(desc(lead_time))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 2\n  hotel        lead_time\n  <chr>            <dbl>\n1 Resort Hotel       737\n2 Resort Hotel       709\n3 City Hotel         629\n4 City Hotel         629\n5 City Hotel         629\n6 City Hotel         629\n# … with 119,384 more rows\n```\n:::\n:::\n\n]\n]\n\n\n---\n\n## What is a pipe?\n\nIn programming, a pipe is a technique for passing information from one process to another.\n\n.pull-left[\n- Start with the data frame `hotels`, and pass it to the `select()` function,\n- then we select the variables `hotel` and `lead_time`,\n- and then we arrange the data frame by `lead_time` in descending order.\n]\n.pull-right[\n.small[\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(hotel, lead_time) %>% \n  arrange(desc(lead_time)) #<<\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 2\n  hotel        lead_time\n  <chr>            <dbl>\n1 Resort Hotel       737\n2 Resort Hotel       709\n3 City Hotel         629\n4 City Hotel         629\n5 City Hotel         629\n6 City Hotel         629\n# … with 119,384 more rows\n```\n:::\n:::\n]\n]\n\n---\n\n\n## Aside\n\nThe pipe operator is implemented in the package **magrittr**, though we don't need to load this package explicitly since **tidyverse** does this for us.\n\n--\n\n.question[\nAny guesses as to why the package is called magrittr?\n]\n\n--\n\n.pull-left[\n\n::: {.cell layout-align=\"center\" caption='Magritte\\'s pipe'}\n::: {.cell-output-display}\n![](img/magritte.jpg){fig-align='center' width=90%}\n:::\n:::\n\n]\n.pull-right[\n\n::: {.cell layout-align=\"center\" caption='magrittr\\'s pipe'}\n::: {.cell-output-display}\n![](img/magrittr.jpg){fig-align='center' width=100%}\n:::\n:::\n\n]\n\n\n---\n\n## How does a pipe work?\n\n- You can think about the following sequence of actions - find keys, \nunlock car, start car, drive to work, park.\n\n--\n- Expressed as a set of nested functions in R pseudocode this would look like:\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npark(drive(start_car(find(\"keys\")), to = \"work\"))\n```\n:::\n\n--\n- Writing it out using pipes give it a more natural (and easier to read) \nstructure:\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfind(\"keys\") %>%\n  start_car() %>%\n  drive(to = \"work\") %>%\n  park()\n```\n:::\n\n---\n\n\n## A note on piping and layering\n\n- `%>%` used mainly in **dplyr** pipelines, *we pipe the output of the previous line of code as the first input of the next line of code*\n\n--\n- `+` used in **ggplot2** plots is used for \"layering\", *we create the plot in layers, separated by `+`*\n\n\n---\n\n## dplyr\n\n.midi[\n❌\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels +\n  select(hotel, lead_time)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in select(hotel, lead_time): object 'hotel' not found\n```\n:::\n:::\n\n✅\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(hotel, lead_time)\n```\n:::\n\n::: {.cell layout-align=\"center\" output.lines='6'}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 2\n  hotel        lead_time\n  <chr>            <dbl>\n1 Resort Hotel       342\n2 Resort Hotel       737\n3 Resort Hotel         7\n...\n```\n:::\n:::\n]\n\n---\n\n\n## ggplot2\n\n.midi[\n❌\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hotels, aes(x = hotel, fill = deposit_type)) %>%\n  geom_bar()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `validate_mapping()`:\n! `mapping` must be created by `aes()`\nDid you use %>% instead of +?\n```\n:::\n:::\n\n\n✅\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hotels, aes(x = hotel, fill = deposit_type)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](u2-d06-grammar-wrangle_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=25%}\n:::\n:::\n\n]\n\n\n---\n\n## Code styling\n\nMany of the styling principles are consistent across `%>%` and `+`:\n\n- always a space before\n- always a line break after (for pipelines with more than 2 lines)\n\n❌\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hotels,aes(x=hotel,y=deposit_type))+geom_bar()\n```\n:::\n\n✅\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(hotels, aes(x = hotel, y = deposit_type)) + \n  geom_bar()\n```\n:::\n",
    "supporting": [
      "u2-d06-grammar-wrangle_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/font-awesome/css/all.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/font-awesome/css/v4-shims.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/panelset/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/panelset/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}