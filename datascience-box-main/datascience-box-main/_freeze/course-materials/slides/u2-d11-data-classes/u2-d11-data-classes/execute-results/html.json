{
  "hash": "d6af24962ce08403da60ec032c707a67",
  "result": {
    "markdown": "---\ntitle: \"Data classes\"\nsubtitle: \"<br><br> Data Science in a Box\"\nauthor: \"[datasciencebox.org](https://datasciencebox.org/)\"\noutput:\n  xaringan::moon_reader:\n    css: [\"../xaringan-themer.css\", \"../slides.css\"]\n    lib_dir: libs\n    nature:\n      ratio: \"16:9\"\n      highlightLines: true\n      highlightStyle: solarized-light\n      countIncrementalSlides: false\n---\n\n\n\n\nlayout: true\n  \n<div class=\"my-footer\">\n<span>\n<a href=\"https://datasciencebox.org\" target=\"_blank\">datasciencebox.org</a>\n</span>\n</div> \n\n---\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nclass: middle\n\n# Data classes\n\n------------------------------------------------------------------------\n\n## Data classes\n\nWe talked about *types* so far, next we'll introduce the concept of *classes*\n\n-   Vectors are like Lego building blocks\n\n| \\- We stick them together to build more complicated constructs, e.g. *representations of data*                                                                                                                                                                  |\n|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| \\- The **class** attribute relates to the S3 class of an object which determines its behaviour - You don't need to worry about what S3 classes really mean, but you can read more about it [here](https://adv-r.hadley.nz/s3.html#s3-classes) if you're curious |\n\n-   Examples: factors, dates, and data frames\n\n------------------------------------------------------------------------\n\n## Factors\n\nR uses factors to handle categorical variables, variables that have a fixed and known set of possible values\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- factor(c(\"BS\", \"MS\", \"PhD\", \"MS\"))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] BS  MS  PhD MS \nLevels: BS MS PhD\n```\n:::\n:::\n\n\n--\n\n.pull-left\\[\\] .pull-right\\[\\]\n\n------------------------------------------------------------------------\n\n## More on factors\n\nWe can think of factors like character (level labels) and an integer (level numbers) glued together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n Factor w/ 3 levels \"BS\",\"MS\",\"PhD\": 1 2 3 2\n```\n:::\n\n```{.r .cell-code}\nas.integer(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 2\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Dates\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ny <- as.Date(\"2020-01-01\")\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2020-01-01\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nclass(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## More on dates\n\nWe can think of dates like an integer (the number of days since the origin, 1 Jan 1970) and an integer (the origin) glued together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nas.integer(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 18262\n```\n:::\n\n```{.r .cell-code}\nas.integer(y) / 365 # roughly 50 yrs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50.03288\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Data frames\n\nWe can think of data frames like like vectors of equal length glued together\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1:2, y = 3:4)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y\n1 1 3\n2 2 4\n```\n:::\n:::\n\n\n.pull-left\\[\\] .pull-right\\[\\]\n\n------------------------------------------------------------------------\n\n## Lists\n\nLists are a generic vector container vectors of any type can go in them\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nl <- list(\n  x = 1:4,\n  y = c(\"hi\", \"hello\", \"jello\"),\n  z = c(TRUE, FALSE)\n)\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$x\n[1] 1 2 3 4\n\n$y\n[1] \"hi\"    \"hello\" \"jello\"\n\n$z\n[1]  TRUE FALSE\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Lists and data frames\n\n-   A data frame is a special list containing vectors of equal length\n-   When we use the `pull()` function, we extract a vector from the data frame\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x y\n1 1 3\n2 2 4\n```\n:::\n\n```{.r .cell-code}\ndf %>%\n  pull(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 4\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nclass: middle\n\n# Working with factors\n\n------------------------------------------------------------------------\n\n\n\n\n\n## Read data in as character strings\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglimpse(cat_lovers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 60\nColumns: 3\n$ name           <chr> \"Bernice Warren\", \"Woodrow Stone\", \"Will…\n$ number_of_cats <chr> \"0\", \"0\", \"1\", \"3\", \"3\", \"2\", \"1\", \"1\", …\n$ handedness     <chr> \"left\", \"left\", \"left\", \"left\", \"left\", …\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## But coerce when plotting\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(cat_lovers, mapping = aes(x = handedness)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](u2-d11-data-classes_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=60%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Use forcats to manipulate factors\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncat_lovers %>%\n  mutate(handedness = fct_infreq(handedness)) %>% #<<\n  ggplot(mapping = aes(x = handedness)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](u2-d11-data-classes_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=55%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Come for the functionality\n\n.pull-left\\[ ... stay for the logo\\] .pull-right\\[\\]\n\n.pull-left-wide\\[ - Factors are useful when you have true categorical data and you want to override the ordering of character vectors to improve display - They are also useful in modeling scenarios - The **forcats** package provides a suite of useful tools that solve common problems with factors\\]\n\n------------------------------------------------------------------------\n\n.small\\[ .your-turn\\[ \\### .hand\\[Your turn!\\]\n\\]\\]\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](u2-d11-data-classes_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nclass: middle\n\n# Working with dates\n\n------------------------------------------------------------------------\n\n## Make a date\n\n.pull-left\\[\\] .pull-right\\[ - **lubridate** is the tidyverse-friendly package that makes dealing with dates a little easier - It's not one of the *core* tidyverse packages, hence it's installed with `install.packages(\"tidyverse)` but it's not loaded with it, and needs to be explicitly loaded with `library(lubridate)`\\]\n\n------------------------------------------------------------------------\n\nclass: middle\n\n.hand\\[.light-blue\\[ we're just going to scratch the surface of working with dates in R here...\\]\\]\n\n------------------------------------------------------------------------\n\n.question\\[ Calculate and visualise the number of bookings on any given arrival date.\\]\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhotels %>%\n  select(starts_with(\"arrival_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 119,390 × 4\n  arrival_date_year arrival_date_month arrival_date_week_number\n              <dbl> <chr>                                 <dbl>\n1              2015 July                                     27\n2              2015 July                                     27\n3              2015 July                                     27\n4              2015 July                                     27\n5              2015 July                                     27\n6              2015 July                                     27\n# … with 119,384 more rows, and 1 more variable:\n#   arrival_date_day_of_month <dbl>\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n## Step 1. Construct dates\n\n.midi\\[\\]\n\n------------------------------------------------------------------------\n\n## Step 2. Count bookings per date\n\n.midi\\[\\]\n\n------------------------------------------------------------------------\n\n## Step 3. Visualise bookings per date\n\n.midi\\[\\]\n\n------------------------------------------------------------------------\n\n.hand\\[zooming in a bit...\\]\n\n.question\\[ Why does the plot start with August when we know our data start in July?\nAnd why does 10 August come after 1 August?\\]\n\n.midi\\[\\]\n\n------------------------------------------------------------------------\n\n## Step 1. *REVISED* Construct dates \"as dates\"\n\n.midi\\[\\]\n\n------------------------------------------------------------------------\n\n## Step 2. Count bookings per date\n\n.midi\\[\\]\n\n------------------------------------------------------------------------\n\n## Step 3a. Visualise bookings per date\n\n.midi\\[\\]\n\n------------------------------------------------------------------------\n\n## Step 3b. Visualise using a smooth curve\n\n.midi\\[\\]\n",
    "supporting": [
      "u2-d11-data-classes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/font-awesome/css/all.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/font-awesome/css/v4-shims.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/panelset/panelset.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/panelset/panelset.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}