{
  "hash": "8cfd1873755890674e339d7c1b2cb492",
  "result": {
    "markdown": "---\ntitle: \"The Office - Solution\"\nauthor: \"Mine Çetinkaya-Rundel\"\nformat: html\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(schrute)\nlibrary(lubridate)\n```\n:::\n\n\nUse `theoffice` data from the [**schrute**](https://bradlindblad.github.io/schrute/) package to predict IMDB scores for episodes of The Office.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(theoffice)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 55,130\nColumns: 12\n$ index            <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16…\n$ season           <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ episode          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ episode_name     <chr> \"Pilot\", \"Pilot\", \"Pilot\", \"Pilot\", \"Pilot\", \"Pilot\",…\n$ director         <chr> \"Ken Kwapis\", \"Ken Kwapis\", \"Ken Kwapis\", \"Ken Kwapis…\n$ writer           <chr> \"Ricky Gervais;Stephen Merchant;Greg Daniels\", \"Ricky…\n$ character        <chr> \"Michael\", \"Jim\", \"Michael\", \"Jim\", \"Michael\", \"Micha…\n$ text             <chr> \"All right Jim. Your quarterlies look very good. How …\n$ text_w_direction <chr> \"All right Jim. Your quarterlies look very good. How …\n$ imdb_rating      <dbl> 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6, 7.6…\n$ total_votes      <int> 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706, 3706,…\n$ air_date         <fct> 2005-03-24, 2005-03-24, 2005-03-24, 2005-03-24, 2005-…\n```\n:::\n:::\n\n\nFix `air_date` for later use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheoffice <- theoffice %>%\n  mutate(air_date = ymd(as.character(air_date)))\n```\n:::\n\n\nWe will\n\n-   engineer features based on episode scripts\n-   train a model\n-   perform cross validation\n-   make predictions\n\nNote: The episodes listed in `theoffice` don't match the ones listed in the data we used in the [cross validation lesson](https://ids-s1-20.github.io/slides/week-10/w10-d02-cross-validation/w10-d02-cross-validation.html).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheoffice %>%\n  distinct(season, episode)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 186 × 2\n   season episode\n    <int>   <int>\n 1      1       1\n 2      1       2\n 3      1       3\n 4      1       4\n 5      1       5\n 6      1       6\n 7      2       1\n 8      2       2\n 9      2       3\n10      2       4\n# … with 176 more rows\n```\n:::\n:::\n\n\n### Exercise 1 - Calculate the percentage of lines spoken by Jim, Pam, Michael, and Dwight for each episode of The Office.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_lines <- theoffice %>%\n  group_by(season, episode) %>%\n  mutate(\n    n_lines = n(),\n    lines_jim = sum(character == \"Jim\") / n_lines,\n    lines_pam = sum(character == \"Pam\") / n_lines,\n    lines_michael = sum(character == \"Michael\") / n_lines,\n    lines_dwight = sum(character == \"Dwight\") / n_lines,\n  ) %>%\n  ungroup() %>%\n  select(season, episode, episode_name, contains(\"lines_\")) %>%\n  distinct(season, episode, episode_name, .keep_all = TRUE)\n```\n:::\n\n\n### Exercise 2 - Identify episodes that touch on Halloween, Valentine's Day, and Christmas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheoffice <- theoffice %>%\n  mutate(text = tolower(text))\n\nhalloween_episodes <- theoffice %>%\n  filter(str_detect(text, \"halloween\")) %>% \n  count(episode_name) %>%\n  filter(n > 1) %>%\n  mutate(halloween = 1) %>%\n  select(-n)\n\nvalentine_episodes <- theoffice %>%\n  filter(str_detect(text, \"valentine\")) %>% \n  count(episode_name) %>%\n  filter(n > 1) %>%\n  mutate(valentine = 1) %>%\n  select(-n)\n\nchristmas_episodes <- theoffice %>%\n  filter(str_detect(text, \"christmas\")) %>% \n  count(episode_name) %>%\n  filter(n > 1) %>%\n  mutate(christmas = 1) %>%\n  select(-n)\n```\n:::\n\n\n### Exercise 3 - Put together a modeling dataset that includes features you've engineered. Also add an indicator variable called `michael` which takes the value `1` if Michael Scott (Steve Carrell) was there, and `0` if not. Note: Michael Scott (Steve Carrell) left the show at the end of Season 7.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_df <- theoffice %>%\n  select(season, episode, episode_name, imdb_rating, total_votes, air_date) %>%\n  distinct(season, episode, .keep_all = TRUE) %>%\n  left_join(halloween_episodes, by = \"episode_name\") %>% \n  left_join(valentine_episodes, by = \"episode_name\") %>% \n  left_join(christmas_episodes, by = \"episode_name\") %>% \n  replace_na(list(halloween = 0, valentine = 0, christmas = 0)) %>%\n  mutate(michael = if_else(season > 7, 0, 1)) %>%\n  mutate(across(halloween:michael, as.factor)) %>%\n  left_join(office_lines, by = c(\"season\", \"episode\", \"episode_name\"))\n```\n:::\n\n\n### Exercise 4 - Split the data into training (75%) and testing (25%).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1122)\noffice_split <- initial_split(office_df)\noffice_train <- training(office_split)\noffice_test <- testing(office_split)\n```\n:::\n\n\n### Exercise 5 - Specify a linear regression model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_mod <- linear_reg() %>%\n  set_engine(\"lm\")\n```\n:::\n\n\n### Exercise 6 - Create a recipe that updates the role of `episode_name` to not be a predictor, removes `air_date` as a predictor, and removes all zero variance predictors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_rec <- recipe(imdb_rating ~ ., data = office_train) %>%\n  update_role(episode_name, new_role = \"id\") %>%\n  step_rm(air_date) %>%\n  step_dummy(all_nominal(), -episode_name) %>%\n  step_zv(all_predictors())\n```\n:::\n\n\n### Exercise 7 - Build a workflow for fitting the model specified earlier and using the recipe you developed to preprocess the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_wflow <- workflow() %>%\n  add_model(office_mod) %>%\n  add_recipe(office_rec)\n```\n:::\n\n\n### Exercise 8 - Fit the model to training data and interpret a couple of the slope coefficients.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_fit <- office_wflow %>%\n  fit(data = office_train)\n\ntidy(office_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 5\n   term           estimate std.error statistic  p.value\n   <chr>             <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)    6.34     0.298       21.2    1.24e-43\n 2 season         0.0542   0.0224       2.42   1.68e- 2\n 3 episode        0.0125   0.00439      2.85   5.05e- 3\n 4 total_votes    0.000372 0.0000390    9.55   1.25e-16\n 5 lines_jim      0.653    0.679        0.962  3.38e- 1\n 6 lines_pam      0.0329   0.696        0.0473 9.62e- 1\n 7 lines_michael  0.111    0.544        0.204  8.39e- 1\n 8 lines_dwight   0.806    0.522        1.54   1.25e- 1\n 9 halloween_X1  -0.00340  0.181       -0.0188 9.85e- 1\n10 valentine_X1  -0.0573   0.180       -0.318  7.51e- 1\n11 christmas_X1   0.285    0.129        2.22   2.82e- 2\n12 michael_X1     0.585    0.141        4.15   6.01e- 5\n```\n:::\n:::\n\n\n### Exercise 9 - Perform 5-fold cross validation and view model performance metrics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(345)\nfolds <- vfold_cv(office_train, v = 5)\nfolds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#  5-fold cross-validation \n# A tibble: 5 × 2\n  splits           id   \n  <list>           <chr>\n1 <split [111/28]> Fold1\n2 <split [111/28]> Fold2\n3 <split [111/28]> Fold3\n4 <split [111/28]> Fold4\n5 <split [112/27]> Fold5\n```\n:::\n\n```{.r .cell-code}\nset.seed(456)\noffice_fit_rs <- office_wflow %>%\n  fit_resamples(folds)\n\ncollect_metrics(office_fit_rs)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1 rmse    standard   0.367     5  0.0512 Preprocessor1_Model1\n2 rsq     standard   0.543     5  0.0386 Preprocessor1_Model1\n```\n:::\n:::\n\n\n### Exercise 10 - Use your model to make predictions for the testing data and calculate the RMSE. Also use the model developed in the [cross validation lesson](https://ids-s1-20.github.io/slides/week-10/w10-d02-cross-validation/w10-d02-cross-validation.html) to make predictions for the testing data and calculate the RMSE as well. Which model did a better job in predicting IMDB scores for the testing data?\n\n#### New model\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_test_pred <- predict(office_fit, new_data = office_test) %>%\n  bind_cols(office_test %>% select(imdb_rating, episode_name))\n\nrmse(office_test_pred, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.401\n```\n:::\n:::\n\n\n#### Old model\n\n\n::: {.cell}\n\n```{.r .cell-code}\noffice_mod_old <- linear_reg() %>%\n  set_engine(\"lm\")\n\noffice_rec_old <- recipe(imdb_rating ~ season + episode + total_votes + air_date, data = office_train) %>%\n  # extract month of air_date\n  step_date(air_date, features = \"month\") %>%\n  step_rm(air_date) %>%\n  # make dummy variables of month \n  step_dummy(contains(\"month\")) %>%\n  # remove zero variance predictors\n  step_zv(all_predictors())\n\noffice_wflow_old <- workflow() %>%\n  add_model(office_mod_old) %>%\n  add_recipe(office_rec_old)\n\noffice_fit_old <- office_wflow_old %>%\n  fit(data = office_train)\n\ntidy(office_fit_old)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 5\n   term                estimate std.error statistic  p.value\n   <chr>                  <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)         7.20     0.188        38.4   9.92e-72\n 2 season             -0.0501   0.0140       -3.57  5.04e- 4\n 3 episode             0.0449   0.00877       5.11  1.13e- 6\n 4 total_votes         0.000360 0.0000404     8.89  4.99e-15\n 5 air_date_month_Feb -0.145    0.139        -1.04  2.99e- 1\n 6 air_date_month_Mar -0.376    0.134        -2.81  5.69e- 3\n 7 air_date_month_Apr -0.309    0.131        -2.36  1.96e- 2\n 8 air_date_month_May -0.128    0.162        -0.791 4.30e- 1\n 9 air_date_month_Sep  0.512    0.178         2.88  4.63e- 3\n10 air_date_month_Oct  0.270    0.139         1.95  5.38e- 2\n11 air_date_month_Nov  0.116    0.126         0.924 3.57e- 1\n12 air_date_month_Dec  0.407    0.165         2.47  1.49e- 2\n```\n:::\n\n```{.r .cell-code}\noffice_test_pred_old <- predict(office_fit_old, new_data = office_test) %>%\n  bind_cols(office_test %>% select(imdb_rating, episode_name))\n\nrmse(office_test_pred_old, truth = imdb_rating, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard       0.403\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}